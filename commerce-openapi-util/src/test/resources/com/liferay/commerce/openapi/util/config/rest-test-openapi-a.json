{
	"components": {
		"parameters": {
			"groupQueryParam": {
				"in": "query",
				"name": "groupId",
				"required": true,
				"schema": {
					"description": "Group to filter (Liferay site)",
					"example": 30130,
					"format": "int64",
					"minimum": 0,
					"type": "integer"
				}
			},
			"id2PathParam": {
				"examples": {
					"externalId": {
						"summary": "External idenfitifer",
						"value": "ext-uniqueId"
					},
					"localId": {
						"summary": "Local identifier",
						"value": "23456"
					}
				},
				"in": "path",
				"name": "id2",
				"required": true,
				"schema": {
					"description": "The resource Id, or external reference code Id if it's prefixed with ext-",
					"minLength": 1,
					"type": "string"
				}
			},
			"idPathParam": {
				"examples": {
					"externalId": {
						"summary": "External idenfitifer",
						"value": "ext-uniqueId"
					},
					"localId": {
						"summary": "Local identifier",
						"value": "23456"
					}
				},
				"in": "path",
				"name": "id",
				"required": true,
				"schema": {
					"description": "The resource Id, or external reference code Id if it's prefixed with ext-",
					"minLength": 1,
					"type": "string"
				}
			}
		},
		"responses": {
			"NotFound": {
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/Error"
						}
					},
					"application/xml": {
						"schema": {
							"$ref": "#/components/schemas/Error"
						}
					}
				},
				"description": "The specified resource was not found"
			},
			"UnauthorizedError": {
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/Error"
						}
					},
					"application/xml": {
						"schema": {
							"$ref": "#/components/schemas/Error"
						}
					}
				},
				"description": "Authentication information is missing or invalid"
			}
		},
		"schemas": {
			"Account": {
				"properties": {
					"addresses": {
						"example": [
							{
								"city": "Diamond Bar",
								"commerceCountryId": 30130,
								"commerceRegionId": 30234,
								"defaultBilling": true,
								"defaultShipping": true,
								"description": "right stairs, first room on the left",
								"id": 31130,
								"latitude": 33.9976884,
								"longitude": -117.8144595,
								"name": "Alessio Antonio Rendina",
								"phoneNumber": "(123) 456 7890",
								"street1": "1400 Montefino Ave",
								"street2": "1st floor",
								"street3": "suite 200",
								"zip": "91765"
							}
						],
						"items": {
							"$ref": "#/components/schemas/Address"
						},
						"type": "array"
					},
					"emailAddresses": {
						"example": [
							"joe.1@commerce.com",
							"joe.2@commerce.com",
							"joe.3@commerce.com"
						],
						"items": {
							"format": "email",
							"type": "string"
						},
						"type": "array"
					},
					"externalReferenceCode": {
						"example": "AB-34098-789-N",
						"type": "string"
					},
					"id": {
						"example": 30130,
						"format": "int64",
						"minimum": 0,
						"type": "integer"
					},
					"logoId": {
						"example": 20078,
						"format": "int64",
						"minimum": 0,
						"type": "integer"
					},
					"name": {
						"example": "Account Name",
						"type": "string"
					},
					"organizations": {
						"example": [
							{
								"id": 20546,
								"name": "Liferay Italy",
								"organizationId": 20433,
								"treePath": "/Liferay/Liferay Italy"
							}
						],
						"items": {
							"$ref": "#/components/schemas/AccountOrganization"
						},
						"type": "array"
					},
					"root": {
						"example": true,
						"type": "boolean"
					},
					"taxId": {
						"example": "Abcd1234",
						"type": "string"
					},
					"type": {
						"example": 1,
						"format": "int32",
						"maximum": 2,
						"minimum": 0,
						"type": "integer"
					},
					"users": {
						"example": [
							{
								"id": 31256,
								"name": "Alessio Antonio Rendina",
								"roles": [
									{
										"description": {
											"en_US": "Account Administrator Description US",
											"hr_HR": "Account Administrator Description HR",
											"hu_HU": "Account Administrator Description HU"
										},
										"id": 30021,
										"name": "Account Administrator",
										"title": {
											"en_US": "Account Administrator US",
											"hr_HR": "Account Administrator HR",
											"hu_HU": "Account Administrator HU"
										}
									}
								],
								"userId": 30002
							}
						],
						"items": {
							"$ref": "#/components/schemas/AccountMember"
						},
						"type": "array"
					}
				},
				"required": [
					"name",
					"externalReferenceCode"
				],
				"type": "object"
			},
			"AccountMember": {
				"properties": {
					"commerceAccountId": {
						"example": 30130,
						"format": "int64",
						"minimum": 0,
						"type": "integer"
					},
					"name": {
						"example": "User Name",
						"type": "string"
					},
					"roles": {
						"example": [
							{
								"description": {
									"en_US": "Account Administrator Description US",
									"hr_HR": "Account Administrator Description HR",
									"hu_HU": "Account Administrator Description HU"
								},
								"id": 30021,
								"name": "Account Administrator",
								"title": {
									"en_US": "Account Administrator US",
									"hr_HR": "Account Administrator HR",
									"hu_HU": "Account Administrator HU"
								}
							},
							{
								"description": {
									"en_US": "Order Manager Description US",
									"hr_HR": "Order Manager Description HR",
									"hu_HU": "Order Manager Description HU"
								},
								"id": 30023,
								"name": "Order Manager",
								"title": {
									"en_US": "Order Manager US",
									"hr_HR": "Order Manager HR",
									"hu_HU": "Order Manager HU"
								}
							}
						],
						"items": {
							"$ref": "#/components/schemas/AccountRole"
						},
						"type": "array"
					},
					"userId": {
						"example": 30002,
						"format": "int64",
						"minimum": 0,
						"type": "integer"
					}
				},
				"required": [
					"commerceAccountId",
					"userId"
				],
				"type": "object"
			},
			"AccountOrganization": {
				"properties": {
					"commerceAccountId": {
						"example": 30130,
						"format": "int64",
						"minimum": 0,
						"type": "integer"
					},
					"name": {
						"example": "Organization Name",
						"type": "string"
					},
					"organizationId": {
						"example": 30002,
						"format": "int64",
						"minimum": 0,
						"type": "integer"
					},
					"treePath": {
						"example": "/Parent Organization/Organization Name",
						"type": "string"
					}
				},
				"required": [
					"commerceAccountId",
					"organizationId"
				],
				"type": "object"
			},
			"AccountRole": {
				"properties": {
					"description": {
						"additionalProperties": {
							"type": "string"
						},
						"example": {
							"en_US": "Role Description US",
							"hr_HR": "Role Description HR",
							"hu_HU": "Role Description HU"
						},
						"type": "object"
					},
					"name": {
						"example": "Role Name",
						"type": "string"
					},
					"roleId": {
						"example": 30130,
						"format": "int64",
						"minimum": 0,
						"type": "integer"
					},
					"title": {
						"additionalProperties": {
							"type": "string"
						},
						"example": {
							"en_US": "Role Title US",
							"hr_HR": "Role Title HR",
							"hu_HU": "Role Title HU"
						},
						"type": "object"
					}
				},
				"required": [
					"name"
				],
				"type": "object"
			},
			"Address": {
				"properties": {
					"city": {
						"example": "Diamond Bar",
						"type": "string"
					},
					"commerceCountryId": {
						"example": 30130,
						"format": "int64",
						"minimum": 0,
						"type": "integer"
					},
					"commerceRegionId": {
						"example": 30234,
						"format": "int64",
						"minimum": 0,
						"type": "integer"
					},
					"defaultBilling": {
						"example": true,
						"type": "boolean"
					},
					"defaultShipping": {
						"example": true,
						"type": "boolean"
					},
					"description": {
						"example": "right stairs, first room on the left",
						"type": "string"
					},
					"id": {
						"example": 31130,
						"format": "int64",
						"minimum": 0,
						"type": "integer"
					},
					"latitude": {
						"example": 33.9976884,
						"format": "double",
						"type": "number"
					},
					"longitude": {
						"example": -117.8144595,
						"format": "double",
						"type": "number"
					},
					"name": {
						"example": "Alessio Antonio Rendina",
						"type": "string"
					},
					"phoneNumber": {
						"example": "(123) 456 7890",
						"type": "string"
					},
					"street1": {
						"example": "1400 Montefino Ave",
						"type": "string"
					},
					"street2": {
						"example": "1st floor",
						"type": "string"
					},
					"street3": {
						"example": "suite 200",
						"type": "string"
					},
					"zip": {
						"example": "91765",
						"type": "string"
					}
				},
				"required": [
					"city",
					"commerceCountryId",
					"name",
					"street1"
				],
				"type": "object"
			},
			"Country": {
				"properties": {
					"billingAllowed": {
						"example": true,
						"type": "boolean"
					},
					"id": {
						"example": 30130,
						"format": "int64",
						"minimum": 0,
						"type": "integer"
					},
					"name": {
						"additionalProperties": {
							"type": "string"
						},
						"example": {
							"en_US": "Croatia",
							"hr_HR": "Hrvatska",
							"hu_HU": "Horvatorszag"
						},
						"type": "object"
					},
					"numericISOCode": {
						"example": 191,
						"type": "integer"
					},
					"regions": {
						"example": [
							{
								"active": true,
								"code": "CA",
								"commerceCountryId": 30130,
								"id": 30234,
								"name": "California",
								"priority": 1.1
							},
							{
								"active": true,
								"code": "TX",
								"commerceCountryId": 30130,
								"id": 30243,
								"name": "Texas",
								"priority": 1.2
							}
						],
						"items": {
							"$ref": "#/components/schemas/Region"
						},
						"type": "array"
					},
					"shippingAllowed": {
						"example": true,
						"type": "boolean"
					},
					"subjectToVAT": {
						"example": true,
						"type": "boolean"
					},
					"threeLettersISOCode": {
						"example": "HRV",
						"type": "string"
					},
					"twoLettersISOCode": {
						"example": "HR",
						"type": "string"
					}
				},
				"required": [
					"name",
					"numericISOCode",
					"threeLettersISOCode",
					"twoLettersISOCode"
				],
				"type": "object"
			},
			"Currency": {
				"properties": {
					"code": {
						"example": "USD",
						"type": "string"
					},
					"formatPattern": {
						"additionalProperties": {
							"type": "string"
						},
						"example": {
							"en_US": "$###,##0.00"
						},
						"type": "object"
					},
					"id": {
						"example": 30130,
						"format": "int64",
						"type": "integer"
					},
					"maxFractionDigits": {
						"example": 2,
						"type": "integer"
					},
					"minFractionDigits": {
						"example": 2,
						"type": "integer"
					},
					"name": {
						"additionalProperties": {
							"type": "string"
						},
						"example": {
							"en_US": "US Dollar"
						},
						"type": "object"
					},
					"primary": {
						"example": true,
						"type": "boolean"
					},
					"rate": {
						"example": 1.0,
						"format": "bigdecimal",
						"minimum": 0,
						"type": "number"
					},
					"roundingMode": {
						"example": "HALF_EVEN",
						"type": "string"
					}
				},
				"required": [
					"name",
					"code",
					"rate",
					"formatPattern",
					"roundingMode"
				],
				"type": "object"
			},
			"Error": {
				"properties": {
					"errorCode": {
						"description": "Internal error code mapping",
						"example": 996,
						"readOnly": true,
						"type": "integer"
					},
					"errorDescription": {
						"example": "Unable to find currency. Currency code should be expressed with 3-letter ISO 4217 format.",
						"readOnly": true,
						"type": "string"
					},
					"message": {
						"example": "No CommerceCurrency exists with the key {groupId=41811, code=US Dollar}",
						"readOnly": true,
						"type": "string"
					},
					"status": {
						"description": "HTTP Status code",
						"example": 404,
						"readOnly": true,
						"type": "integer"
					}
				},
				"required": [
					"message",
					"status",
					"errorCode",
					"errorDescription"
				],
				"type": "object"
			},
			"Inventory": {
				"properties": {
					"id": {
						"example": 30130,
						"format": "int64",
						"minimum": 0,
						"type": "integer"
					},
					"quantity": {
						"example": 10,
						"type": "integer"
					},
					"skuExternalReferenceCode": {
						"example": "AB-34098-789-N",
						"type": "string"
					},
					"skuId": {
						"example": 30130,
						"format": "int64",
						"minimum": 0,
						"type": "integer"
					},
					"warehouseId": {
						"example": 30130,
						"format": "int64",
						"minimum": 0,
						"type": "integer"
					},
					"warehouseName": {
						"example": "660 Park Ave",
						"type": "string"
					}
				},
				"required": [
					"quantity",
					"skuExternalReferenceCode",
					"skuId",
					"warehouseId"
				],
				"type": "object"
			},
			"Order": {
				"properties": {
					"advanceStatus": {
						"example": "trasmitted",
						"type": "string"
					},
					"billingAddress": {
						"$ref": "#/components/schemas/Address"
					},
					"billingAddressId": {
						"example": 31130,
						"format": "int64",
						"minimum": 0,
						"type": "integer"
					},
					"commerceAccountId": {
						"example": 30130,
						"format": "int64",
						"minimum": 0,
						"type": "integer"
					},
					"currency": {
						"example": "USD",
						"type": "string"
					},
					"externalReferenceCode": {
						"example": "AB-34098-789-N",
						"type": "string"
					},
					"id": {
						"example": 30130,
						"format": "int64",
						"minimum": 0,
						"type": "integer"
					},
					"orderStatus": {
						"example": 0,
						"format": "int32",
						"minimum": 0,
						"type": "integer"
					},
					"paymentMethod": {
						"example": "paypal",
						"type": "string"
					},
					"paymentStatus": {
						"example": 0,
						"format": "int32",
						"minimum": 0,
						"type": "integer"
					},
					"purchaseOrderNumber": {
						"example": "Abcd1234",
						"type": "string"
					},
					"shippingAddress": {
						"$ref": "#/components/schemas/Address"
					},
					"shippingAddressId": {
						"example": 31130,
						"format": "int64",
						"minimum": 0,
						"type": "integer"
					},
					"shippingAmount": {
						"example": 12,
						"format": "bigdecimal",
						"minimum": 0,
						"type": "number"
					},
					"shippingMethod": {
						"example": "fixed",
						"type": "string"
					},
					"shippingOption": {
						"example": "by Air",
						"type": "string"
					},
					"subtotal": {
						"example": 101,
						"format": "bigdecimal",
						"minimum": 0,
						"type": "number"
					},
					"total": {
						"example": 113,
						"format": "bigdecimal",
						"minimum": 0,
						"type": "number"
					}
				},
				"required": [
					"commerceAccountId",
					"externalReferenceCode",
					"currency"
				],
				"type": "object"
			},
			"OrderItem": {
				"properties": {
					"commerceOrderId": {
						"example": 30128,
						"format": "int64",
						"minimum": 0,
						"type": "integer"
					},
					"discountAmount": {
						"example": 2,
						"format": "bigdecimal",
						"minimum": 0,
						"type": "number"
					},
					"externalReferenceCode": {
						"example": "AB-34098-789-N",
						"type": "string"
					},
					"finalPrice": {
						"example": 200,
						"format": "bigdecimal",
						"minimum": 0,
						"type": "number"
					},
					"id": {
						"example": 30130,
						"format": "int64",
						"minimum": 0,
						"type": "integer"
					},
					"name": {
						"additionalProperties": {
							"type": "string"
						},
						"example": {
							"en_US": "Hand Saw",
							"hr_HR": "Product Name HR",
							"hu_HU": "Product Name HU"
						},
						"type": "object"
					},
					"quantity": {
						"example": 2,
						"format": "int32",
						"minimum": 0,
						"type": "integer"
					},
					"shippedQuantity": {
						"example": 1,
						"format": "int32",
						"minimum": 0,
						"type": "integer"
					},
					"sku": {
						"example": "12341234",
						"type": "string"
					},
					"skuId": {
						"example": 30128,
						"format": "int64",
						"minimum": 0,
						"type": "integer"
					},
					"subscription": {
						"example": true,
						"type": "boolean"
					},
					"unitPrice": {
						"example": 101,
						"format": "bigdecimal",
						"minimum": 0,
						"type": "number"
					}
				},
				"required": [
					"commerceOrderId",
					"skuId",
					"externalReferenceCode"
				],
				"type": "object"
			},
			"OrderNote": {
				"properties": {
					"author": {
						"example": "Alessio Antonio Rendina",
						"type": "string"
					},
					"commerceOrderId": {
						"example": 30128,
						"format": "int64",
						"minimum": 0,
						"type": "integer"
					},
					"content": {
						"example": "This order will be shipped separately",
						"type": "string"
					},
					"externalReferenceCode": {
						"example": "AB-34098-789-N",
						"type": "string"
					},
					"id": {
						"example": 30130,
						"format": "int64",
						"minimum": 0,
						"type": "integer"
					},
					"restricted": {
						"example": true,
						"type": "boolean"
					}
				},
				"required": [
					"commerceOrderId",
					"externalReferenceCode"
				],
				"type": "object"
			},
			"PriceEntry": {
				"properties": {
					"commercePriceListId": {
						"example": 20078,
						"format": "int64",
						"minimum": 0,
						"type": "integer"
					},
					"commerceProductInstanceId": {
						"example": 30130,
						"format": "int64",
						"minimum": 0,
						"type": "integer"
					},
					"externalReferenceCode": {
						"example": "AB-34098-789-N",
						"type": "string"
					},
					"hasTierPrice": {
						"example": true,
						"type": "boolean"
					},
					"id": {
						"example": 30130,
						"format": "int64",
						"minimum": 0,
						"type": "integer"
					},
					"price": {
						"example": 30130,
						"format": "bigdecimal",
						"minimum": 0,
						"type": "number"
					},
					"promoPrice": {
						"example": 30130,
						"format": "bigdecimal",
						"minimum": 0,
						"type": "number"
					},
					"sku": {
						"example": "Blue handle, 00001l, 70cm, lifetime warranty",
						"type": "string"
					},
					"skuExternalReferenceCode": {
						"example": "CAB-34098-789-N",
						"type": "string"
					},
					"standardPrice": {
						"example": true,
						"type": "boolean"
					}
				},
				"required": [
					"commercePriceListId",
					"price",
					"promoPrice",
					"standardPrice",
					"externalReferenceCode"
				],
				"type": "object"
			},
			"PriceList": {
				"properties": {
					"active": {
						"example": true,
						"type": "boolean"
					},
					"commercePriceListId": {
						"example": 20178,
						"format": "int64",
						"minimum": 0,
						"type": "integer"
					},
					"currency": {
						"example": "EUR",
						"type": "string"
					},
					"displayDate": {
						"example": "2017-07-21",
						"format": "date",
						"type": "string"
					},
					"expirationDate": {
						"example": "2017-08-21",
						"format": "date",
						"type": "string"
					},
					"externalReferenceCode": {
						"example": "AB-34098-789-N",
						"type": "string"
					},
					"id": {
						"example": 30130,
						"format": "int64",
						"minimum": 0,
						"type": "integer"
					},
					"name": {
						"example": "Laptops, Beverages",
						"type": "string"
					},
					"neverExpire": {
						"example": true,
						"type": "boolean"
					},
					"priority": {
						"example": 1.2,
						"format": "double",
						"type": "number"
					}
				},
				"required": [
					"active",
					"externalReferenceCode",
					"neverExpire",
					"priority",
					"currency",
					"name"
				],
				"type": "object"
			},
			"Product": {
				"properties": {
					"active": {
						"example": true,
						"type": "boolean"
					},
					"assetCategoryIds": {
						"example": [
							20001237,
							20210282,
							50441007
						],
						"items": {
							"type": "integer"
						},
						"type": "array"
					},
					"defaultSku": {
						"example": "Blue handle, 00001l, 70cm, lifetime warranty",
						"type": "string"
					},
					"description": {
						"additionalProperties": {
							"type": "string"
						},
						"example": {
							"en_US": "Professional hand stainless steel saw for wood. Made to last and saw forever. Made of best steel",
							"hr_HR": "Product Description HR",
							"hu_HU": "Product Description HU"
						},
						"type": "object"
					},
					"expando": {
						"additionalProperties": true,
						"type": "object"
					},
					"externalReferenceCode": {
						"example": "AB-34098-789-N",
						"type": "string"
					},
					"id": {
						"example": 30130,
						"format": "int64",
						"minimum": 0,
						"type": "integer"
					},
					"name": {
						"additionalProperties": {
							"type": "string"
						},
						"example": {
							"en_US": "Hand Saw",
							"hr_HR": "Product Name HR",
							"hu_HU": "Product Name HU"
						},
						"type": "object"
					},
					"productTypeName": {
						"example": "simple",
						"type": "string"
					},
					"shortDescription": {
						"additionalProperties": {
							"type": "string"
						},
						"example": {
							"en_US": "Hand stainless steel saw for wood",
							"hr_HR": "Product Short Description HR",
							"hu_HU": "Product Short Description HU"
						},
						"type": "object"
					},
					"skus": {
						"example": [
							{
								"cost": 2.0,
								"depth": 5.0,
								"displayDate": "2018-01-25",
								"expirationDate": "2019-03-14",
								"externalReferenceCode": "12345",
								"gtin": null,
								"height": 10.0,
								"id": 37168,
								"manufacturerPartNumber": "56789",
								"neverExpire": false,
								"price": 3.83,
								"promoPrice": 16.0,
								"published": true,
								"purchasable": true,
								"sku": "31187390",
								"weight": 30.0,
								"width": 20.0
							}
						],
						"items": {
							"$ref": "#/components/schemas/Sku"
						},
						"type": "array"
					}
				},
				"required": [
					"name",
					"active",
					"externalReferenceCode",
					"productTypeName"
				],
				"type": "object"
			},
			"ProductOption": {
				"properties": {
					"description": {
						"example": "Description",
						"type": "string"
					},
					"externalReferenceCode": {
						"example": "AB-34098-789-N",
						"type": "string"
					},
					"facetable": {
						"example": true,
						"type": "boolean"
					},
					"fieldType": {
						"enum": [
							"select",
							"radio",
							"date",
							"checkbox",
							"checkbox_multiple",
							"numeric"
						],
						"example": "select",
						"type": "string"
					},
					"id": {
						"example": 30130,
						"format": "int64",
						"minimum": 0,
						"type": "integer"
					},
					"key": {
						"example": "color",
						"type": "string"
					},
					"name": {
						"example": "Color",
						"type": "string"
					},
					"required": {
						"example": true,
						"type": "boolean"
					},
					"skuContributor": {
						"example": true,
						"type": "boolean"
					}
				},
				"required": [
					"name",
					"key",
					"fieldType",
					"externalReferenceCode"
				],
				"type": "object"
			},
			"ProductOptionValue": {
				"properties": {
					"externalReferenceCode": {
						"example": "AB-34098-789-N",
						"type": "string"
					},
					"id": {
						"example": 30130,
						"format": "int64",
						"minimum": 0,
						"type": "integer"
					},
					"key": {
						"example": "black",
						"type": "string"
					},
					"name": {
						"example": "Black",
						"type": "string"
					},
					"priority": {
						"example": 1.2,
						"format": "double",
						"type": "number"
					}
				},
				"required": [
					"name",
					"key",
					"externalReferenceCode"
				],
				"type": "object"
			},
			"Region": {
				"properties": {
					"active": {
						"example": true,
						"type": "boolean"
					},
					"code": {
						"example": "CA",
						"type": "string"
					},
					"commerceCountryId": {
						"example": 30130,
						"format": "int64",
						"minimum": 0,
						"type": "integer"
					},
					"id": {
						"example": 30130,
						"format": "int64",
						"minimum": 0,
						"type": "integer"
					},
					"name": {
						"example": "California",
						"type": "string"
					},
					"priority": {
						"example": 1.1,
						"format": "double",
						"minimum": 0,
						"type": "number"
					}
				},
				"required": [
					"commerceCountryId",
					"name"
				],
				"type": "object"
			},
			"Sku": {
				"properties": {
					"cost": {
						"example": 101,
						"format": "bigdecimal",
						"minimum": 0,
						"type": "number"
					},
					"depth": {
						"example": 1.1,
						"format": "double",
						"minimum": 0,
						"type": "number"
					},
					"displayDate": {
						"example": "2017-07-21",
						"format": "date",
						"type": "string"
					},
					"expirationDate": {
						"example": "2017-08-21",
						"format": "date",
						"type": "string"
					},
					"externalReferenceCode": {
						"example": "AB-34098-789-N",
						"type": "string"
					},
					"gtin": {
						"example": "12341234",
						"type": "string"
					},
					"height": {
						"example": 20.2,
						"format": "double",
						"minimum": 0,
						"type": "number"
					},
					"id": {
						"example": 30130,
						"format": "int64",
						"minimum": 0,
						"type": "integer"
					},
					"manufacturerPartNumber": {
						"example": "12341234",
						"type": "string"
					},
					"neverExpire": {
						"example": true,
						"type": "boolean"
					},
					"price": {
						"example": 101,
						"format": "bigdecimal",
						"minimum": 0,
						"type": "number"
					},
					"promoPrice": {
						"example": 202,
						"format": "bigdecimal",
						"minimum": 0,
						"type": "number"
					},
					"published": {
						"example": true,
						"type": "boolean"
					},
					"purchasable": {
						"example": true,
						"type": "boolean"
					},
					"sku": {
						"example": "12341234",
						"type": "string"
					},
					"weight": {
						"example": 1.1,
						"format": "double",
						"minimum": 0,
						"type": "number"
					},
					"width": {
						"example": 20.2,
						"format": "double",
						"minimum": 0,
						"type": "number"
					}
				},
				"required": [
					"sku",
					"externalReferenceCode"
				],
				"type": "object"
			},
			"User": {
				"properties": {
					"additionalName": {
						"example": "G.I.",
						"type": "string"
					},
					"alternateName": {
						"example": "Joe",
						"type": "string"
					},
					"birthDate": {
						"example": "1996-07-21",
						"format": "date",
						"type": "string"
					},
					"commerceAccountIds": {
						"example": [
							20001237,
							20210282,
							50441007
						],
						"items": {
							"format": "int64",
							"type": "integer"
						},
						"type": "array"
					},
					"dashboardURL": {
						"example": "https://commerce.com/dashboardURL",
						"format": "uri",
						"type": "string"
					},
					"email": {
						"example": "joe@commerce.com",
						"format": "email",
						"type": "string"
					},
					"externalReferenceCode": {
						"example": "AB-34098-789-N",
						"type": "string"
					},
					"familyName": {
						"example": "Smith",
						"type": "string"
					},
					"gender": {
						"example": "male",
						"type": "string"
					},
					"givenName": {
						"example": "Joe",
						"type": "string"
					},
					"id": {
						"example": 30130,
						"format": "int64",
						"minimum": 0,
						"type": "integer"
					},
					"image": {
						"example": "https://commerce.com/userPortrait.jpg",
						"format": "uri",
						"type": "string"
					},
					"jobTitle": {
						"example": "Engineer",
						"type": "string"
					},
					"name": {
						"example": "G.I. Joe",
						"type": "string"
					},
					"profileURL": {
						"example": "https://commerce.com/profileURL",
						"format": "uri",
						"type": "string"
					},
					"roleNames": {
						"example": [
							"Admin",
							"User",
							"Power User"
						],
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"email",
					"givenName",
					"familyName",
					"externalReferenceCode"
				],
				"type": "object"
			},
			"WebSite": {
				"properties": {
					"description": {
						"example": "Site for merchandise",
						"type": "string"
					},
					"id": {
						"example": 30130,
						"format": "int64",
						"minimum": 0,
						"type": "integer"
					},
					"name": {
						"example": "Breccia",
						"type": "string"
					}
				},
				"required": [
					"name",
					"description"
				],
				"type": "object"
			}
		},
		"securitySchemes": {
			"BasicAuth": {
				"scheme": "basic",
				"type": "http"
			},
			"BearerAuth": {
				"scheme": "bearer",
				"type": "http"
			},
			"OAuth2": {
				"flows": {
					"authorizationCode": {
						"authorizationUrl": "/oauth/authorize",
						"scopes": {
							"CommerceOpenApiAdmin.admin": "Grants access to admin operations",
							"CommerceOpenApiAdmin.read": "Grants read access",
							"CommerceOpenApiAdmin.write": "Grants write access"
						},
						"tokenUrl": "/oauth/token"
					}
				},
				"type": "oauth2"
			}
		}
	},
	"info": {
		"contact": {
			"email": "team-commerce@liferay.com",
			"name": "Commerce Team"
		},
		"description": "Open API A",
		"license": {
			"name": "GNU Lesser General Public License 2.1",
			"url": "https://www.gnu.org/licenses/lgpl-2.1.html"
		},
		"title": "Open API A",
		"version": "v2.0"
	},
	"openapi": "3.0.0",
	"paths": {
		"/inventory/{id}": {
			"delete": {
				"operationId": "deleteInventory",
				"parameters": [
					{
						"$ref": "#/components/parameters/idPathParam"
					}
				],
				"responses": {
					"204": {
						"description": "No content"
					},
					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					}
				},
				"security": [
					{
						"BasicAuth": []
					},
					{
						"BearerAuth": []
					},
					{
						"OAuth2": [
							"CommerceOpenApiAdmin.write"
						]
					}
				],
				"summary": "Deletes a Inventory by ID.",
				"tags": [
					"Inventory"
				]
			},
			"get": {
				"operationId": "getInventory",
				"parameters": [
					{
						"$ref": "#/components/parameters/idPathParam"
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Inventory"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Inventory"
								}
							}
						},
						"description": "Successful operation"
					},
					"400": {
						"description": "Invalid input"
					},
					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						},
						"description": "Unexpected error"
					}
				},
				"security": [
					{
						"BasicAuth": []
					},
					{
						"BearerAuth": []
					},
					{
						"OAuth2": [
							"CommerceOpenApiAdmin.read"
						]
					}
				],
				"summary": "Gets a Inventory by ID.",
				"tags": [
					"Inventory"
				]
			},
			"put": {
				"operationId": "updateInventory",
				"parameters": [
					{
						"$ref": "#/components/parameters/idPathParam"
					},
					{
						"$ref": "#/components/parameters/groupQueryParam"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Inventory"
							}
						},
						"application/xml": {
							"schema": {
								"$ref": "#/components/schemas/Inventory"
							}
						}
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "Created"
					},
					"202": {
						"description": "Async"
					},
					"400": {
						"description": "Invalid input"
					},
					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						},
						"description": "Unexpected error"
					}
				},
				"security": [
					{
						"BasicAuth": []
					},
					{
						"BearerAuth": []
					},
					{
						"OAuth2": [
							"CommerceOpenApiAdmin.write"
						]
					}
				],
				"summary": "Updates a Inventory by ID.",
				"tags": [
					"Inventory"
				]
			}
		},
		"/order": {
			"get": {
				"operationId": "getOrders",
				"parameters": [
					{
						"$ref": "#/components/parameters/groupQueryParam"
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Order"
									},
									"type": "array"
								}
							},
							"application/xml": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Order"
									},
									"type": "array"
								}
							}
						},
						"description": "Successful operation"
					},
					"400": {
						"description": "Invalid input"
					},
					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						},
						"description": "Unexpected error"
					}
				},
				"security": [
					{
						"BasicAuth": []
					},
					{
						"BearerAuth": []
					},
					{
						"OAuth2": [
							"CommerceOpenApiAdmin.read"
						]
					}
				],
				"summary": "Gets a List of Orders from a Site.",
				"tags": [
					"Order"
				],
				"x-liferay-context": [
					"language"
				]
			}
		},
		"/order/{id}": {
			"delete": {
				"operationId": "deleteOrder",
				"parameters": [
					{
						"$ref": "#/components/parameters/idPathParam"
					}
				],
				"responses": {
					"204": {
						"description": "No content"
					},
					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					}
				},
				"security": [
					{
						"BasicAuth": []
					},
					{
						"BearerAuth": []
					},
					{
						"OAuth2": [
							"CommerceOpenApiAdmin.write"
						]
					}
				],
				"summary": "Deletes a Order by ID.",
				"tags": [
					"Order"
				]
			},
			"get": {
				"operationId": "getOrder",
				"parameters": [
					{
						"$ref": "#/components/parameters/idPathParam"
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Order"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Order"
								}
							}
						},
						"description": "Successful operation"
					},
					"400": {
						"description": "Invalid input"
					},
					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						},
						"description": "Unexpected error"
					}
				},
				"security": [
					{
						"BasicAuth": []
					},
					{
						"BearerAuth": []
					},
					{
						"OAuth2": [
							"CommerceOpenApiAdmin.read"
						]
					}
				],
				"summary": "Gets a Order by ID.",
				"tags": [
					"Order"
				],
				"x-liferay-context": [
					"language"
				]
			},
			"put": {
				"operationId": "updateOrder",
				"parameters": [
					{
						"$ref": "#/components/parameters/idPathParam"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Order"
							}
						},
						"application/xml": {
							"schema": {
								"$ref": "#/components/schemas/Order"
							}
						}
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "Created"
					},
					"202": {
						"description": "Async"
					},
					"400": {
						"description": "Invalid input"
					},
					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						},
						"description": "Unexpected error"
					}
				},
				"security": [
					{
						"BasicAuth": []
					},
					{
						"BearerAuth": []
					},
					{
						"OAuth2": [
							"CommerceOpenApiAdmin.write"
						]
					}
				],
				"summary": "Updates a Order by ID.",
				"tags": [
					"Order"
				],
				"x-liferay-context": [
					"language"
				]
			}
		},
		"/order/{id}/billingAddress": {
			"get": {
				"operationId": "getBillingAddress",
				"parameters": [
					{
						"$ref": "#/components/parameters/idPathParam"
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Address"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Address"
								}
							}
						},
						"description": "Successful operation"
					},
					"400": {
						"description": "Invalid input"
					},
					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						},
						"description": "Unexpected error"
					}
				},
				"security": [
					{
						"BasicAuth": []
					},
					{
						"BearerAuth": []
					},
					{
						"OAuth2": [
							"CommerceOpenApiAdmin.read"
						]
					}
				],
				"summary": "Gets a billing Address related to an Order.",
				"tags": [
					"Order"
				]
			},
			"post": {
				"operationId": "updateBillingAddress",
				"parameters": [
					{
						"$ref": "#/components/parameters/idPathParam"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Address"
							}
						},
						"application/xml": {
							"schema": {
								"$ref": "#/components/schemas/Address"
							}
						}
					},
					"required": true
				},
				"responses": {
					"201": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Order"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Order"
								}
							}
						},
						"description": "Created"
					},
					"202": {
						"description": "Async"
					},
					"204": {
						"description": "Updated"
					},
					"400": {
						"description": "Invalid input"
					},
					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						},
						"description": "Unexpected error"
					}
				},
				"security": [
					{
						"BasicAuth": []
					},
					{
						"BearerAuth": []
					},
					{
						"OAuth2": [
							"CommerceOpenApiAdmin.write"
						]
					}
				],
				"summary": "Updates a billing Address related to an Order.",
				"tags": [
					"Order"
				],
				"x-liferay-context": [
					"language"
				]
			}
		},
		"/order/{id}/orderItem": {
			"get": {
				"operationId": "getOrderItems",
				"parameters": [
					{
						"$ref": "#/components/parameters/idPathParam"
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/OrderItem"
									},
									"type": "array"
								}
							},
							"application/xml": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/OrderItem"
									},
									"type": "array"
								}
							}
						},
						"description": "Successful operation"
					},
					"400": {
						"description": "Invalid input"
					},
					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						},
						"description": "Unexpected error"
					}
				},
				"security": [
					{
						"BasicAuth": []
					},
					{
						"BearerAuth": []
					},
					{
						"OAuth2": [
							"CommerceOpenApiAdmin.read"
						]
					}
				],
				"summary": "Gets a list of Order Items related to an Order.",
				"tags": [
					"Order"
				]
			},
			"post": {
				"operationId": "upsertOrderItem",
				"parameters": [
					{
						"$ref": "#/components/parameters/idPathParam"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/OrderItem"
							}
						},
						"application/xml": {
							"schema": {
								"$ref": "#/components/schemas/OrderItem"
							}
						}
					},
					"required": true
				},
				"responses": {
					"201": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OrderItem"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/OrderItem"
								}
							}
						},
						"description": "Created"
					},
					"202": {
						"description": "Async"
					},
					"204": {
						"description": "Updated"
					},
					"400": {
						"description": "Invalid input"
					},
					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						},
						"description": "Unexpected error"
					}
				},
				"security": [
					{
						"BasicAuth": []
					},
					{
						"BearerAuth": []
					},
					{
						"OAuth2": [
							"CommerceOpenApiAdmin.write"
						]
					}
				],
				"summary": "Creates or updates an Order Item.",
				"tags": [
					"Order"
				]
			}
		},
		"/order/{id}/orderItem/{orderItemId}": {
			"delete": {
				"operationId": "deleteOrderItem",
				"parameters": [
					{
						"$ref": "#/components/parameters/idPathParam"
					},
					{
						"examples": {
							"externalId": {
								"summary": "External idenfitifer",
								"value": "ext-uniqueId"
							},
							"localId": {
								"summary": "Local identifier",
								"value": "23456"
							}
						},
						"in": "path",
						"name": "orderItemId",
						"required": true,
						"schema": {
							"description": "The order item Id, or its external reference code Id if it's prefixed with ext-",
							"minLength": 1,
							"type": "string"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No content"
					},
					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					}
				},
				"security": [
					{
						"BasicAuth": []
					},
					{
						"BearerAuth": []
					},
					{
						"OAuth2": [
							"CommerceOpenApiAdmin.write"
						]
					}
				],
				"summary": "Deletes an Order Item by ID.",
				"tags": [
					"Order"
				]
			},
			"get": {
				"operationId": "getOrderItem",
				"parameters": [
					{
						"$ref": "#/components/parameters/idPathParam"
					},
					{
						"examples": {
							"externalId": {
								"summary": "External idenfitifer",
								"value": "ext-uniqueId"
							},
							"localId": {
								"summary": "Local identifier",
								"value": "23456"
							}
						},
						"in": "path",
						"name": "orderItemId",
						"required": true,
						"schema": {
							"description": "The order item Id, or its external reference code Id if it's prefixed with ext-",
							"minLength": 1,
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OrderItem"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/OrderItem"
								}
							}
						},
						"description": "Successful operation"
					},
					"400": {
						"description": "Invalid input"
					},
					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						},
						"description": "Unexpected error"
					}
				},
				"security": [
					{
						"BasicAuth": []
					},
					{
						"BearerAuth": []
					},
					{
						"OAuth2": [
							"CommerceOpenApiAdmin.read"
						]
					}
				],
				"summary": "Gets an Order Item by ID.",
				"tags": [
					"Order"
				]
			},
			"post": {
				"operationId": "updateOrderItem",
				"parameters": [
					{
						"$ref": "#/components/parameters/idPathParam"
					},
					{
						"examples": {
							"externalId": {
								"summary": "External idenfitifer",
								"value": "ext-uniqueId"
							},
							"localId": {
								"summary": "Local identifier",
								"value": "23456"
							}
						},
						"in": "path",
						"name": "orderItemId",
						"required": true,
						"schema": {
							"description": "The order item Id, or its external reference code Id if it's prefixed with ext-",
							"minLength": 1,
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/OrderItem"
							}
						},
						"application/xml": {
							"schema": {
								"$ref": "#/components/schemas/OrderItem"
							}
						}
					},
					"required": true
				},
				"responses": {
					"201": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OrderItem"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/OrderItem"
								}
							}
						},
						"description": "Created"
					},
					"202": {
						"description": "Async"
					},
					"204": {
						"description": "Updated"
					},
					"400": {
						"description": "Invalid input"
					},
					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						},
						"description": "Unexpected error"
					}
				},
				"security": [
					{
						"BasicAuth": []
					},
					{
						"BearerAuth": []
					},
					{
						"OAuth2": [
							"CommerceOpenApiAdmin.write"
						]
					}
				],
				"summary": "Updates an Order Item by ID.",
				"tags": [
					"Order"
				]
			}
		},
		"/order/{id}/orderNote": {
			"get": {
				"operationId": "getOrderNotes",
				"parameters": [
					{
						"$ref": "#/components/parameters/idPathParam"
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/OrderNote"
									},
									"type": "array"
								}
							},
							"application/xml": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/OrderNote"
									},
									"type": "array"
								}
							}
						},
						"description": "Successful operation"
					},
					"400": {
						"description": "Invalid input"
					},
					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						},
						"description": "Unexpected error"
					}
				},
				"security": [
					{
						"BasicAuth": []
					},
					{
						"BearerAuth": []
					},
					{
						"OAuth2": [
							"CommerceOpenApiAdmin.read"
						]
					}
				],
				"summary": "Gets a list of Order Notes related to an Order.",
				"tags": [
					"Order"
				]
			},
			"post": {
				"operationId": "upsertOrderNote",
				"parameters": [
					{
						"$ref": "#/components/parameters/idPathParam"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/OrderNote"
							}
						},
						"application/xml": {
							"schema": {
								"$ref": "#/components/schemas/OrderNote"
							}
						}
					},
					"required": true
				},
				"responses": {
					"201": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OrderNote"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/OrderNote"
								}
							}
						},
						"description": "Created"
					},
					"202": {
						"description": "Async"
					},
					"204": {
						"description": "Updated"
					},
					"400": {
						"description": "Invalid input"
					},
					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						},
						"description": "Unexpected error"
					}
				},
				"security": [
					{
						"BasicAuth": []
					},
					{
						"BearerAuth": []
					},
					{
						"OAuth2": [
							"CommerceOpenApiAdmin.write"
						]
					}
				],
				"summary": "Creates or updates an Order Note.",
				"tags": [
					"Order"
				]
			}
		},
		"/order/{id}/orderNote/{orderNoteId}": {
			"delete": {
				"operationId": "deleteOrderNote",
				"parameters": [
					{
						"$ref": "#/components/parameters/idPathParam"
					},
					{
						"examples": {
							"externalId": {
								"summary": "External idenfitifer",
								"value": "ext-uniqueId"
							},
							"localId": {
								"summary": "Local identifier",
								"value": "23456"
							}
						},
						"in": "path",
						"name": "orderNoteId",
						"required": true,
						"schema": {
							"description": "The order note Id, or its external reference code Id if it's prefixed with ext-",
							"minLength": 1,
							"type": "string"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No content"
					},
					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					}
				},
				"security": [
					{
						"BasicAuth": []
					},
					{
						"BearerAuth": []
					},
					{
						"OAuth2": [
							"CommerceOpenApiAdmin.write"
						]
					}
				],
				"summary": "Deletes an Order Note by ID.",
				"tags": [
					"Order"
				]
			},
			"get": {
				"operationId": "getOrderNote",
				"parameters": [
					{
						"$ref": "#/components/parameters/idPathParam"
					},
					{
						"examples": {
							"externalId": {
								"summary": "External idenfitifer",
								"value": "ext-uniqueId"
							},
							"localId": {
								"summary": "Local identifier",
								"value": "23456"
							}
						},
						"in": "path",
						"name": "orderNoteId",
						"required": true,
						"schema": {
							"description": "The order note Id, or its external reference code Id if it's prefixed with ext-",
							"minLength": 1,
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OrderNote"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/OrderNote"
								}
							}
						},
						"description": "Successful operation"
					},
					"400": {
						"description": "Invalid input"
					},
					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						},
						"description": "Unexpected error"
					}
				},
				"security": [
					{
						"BasicAuth": []
					},
					{
						"BearerAuth": []
					},
					{
						"OAuth2": [
							"CommerceOpenApiAdmin.read"
						]
					}
				],
				"summary": "Gets an Order Note by ID.",
				"tags": [
					"Order"
				]
			},
			"post": {
				"operationId": "updateOrderNote",
				"parameters": [
					{
						"$ref": "#/components/parameters/idPathParam"
					},
					{
						"examples": {
							"externalId": {
								"summary": "External idenfitifer",
								"value": "ext-uniqueId"
							},
							"localId": {
								"summary": "Local identifier",
								"value": "23456"
							}
						},
						"in": "path",
						"name": "orderNoteId",
						"required": true,
						"schema": {
							"description": "The order note Id, or its external reference code Id if it's prefixed with ext-",
							"minLength": 1,
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/OrderNote"
							}
						},
						"application/xml": {
							"schema": {
								"$ref": "#/components/schemas/OrderNote"
							}
						}
					},
					"required": true
				},
				"responses": {
					"201": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OrderNote"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/OrderNote"
								}
							}
						},
						"description": "Created"
					},
					"202": {
						"description": "Async"
					},
					"204": {
						"description": "Updated"
					},
					"400": {
						"description": "Invalid input"
					},
					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						},
						"description": "Unexpected error"
					}
				},
				"security": [
					{
						"BasicAuth": []
					},
					{
						"BearerAuth": []
					},
					{
						"OAuth2": [
							"CommerceOpenApiAdmin.write"
						]
					}
				],
				"summary": "Updates an Order Note by ID.",
				"tags": [
					"Order"
				]
			}
		},
		"/order/{id}/shippingAddress": {
			"get": {
				"operationId": "getShippingAddress",
				"parameters": [
					{
						"$ref": "#/components/parameters/idPathParam"
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Address"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Address"
								}
							}
						},
						"description": "Successful operation"
					},
					"400": {
						"description": "Invalid input"
					},
					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						},
						"description": "Unexpected error"
					}
				},
				"security": [
					{
						"BasicAuth": []
					},
					{
						"BearerAuth": []
					},
					{
						"OAuth2": [
							"CommerceOpenApiAdmin.read"
						]
					}
				],
				"summary": "Gets a shipping Address related to an Order.",
				"tags": [
					"Order"
				]
			},
			"post": {
				"operationId": "updateShippingAddress",
				"parameters": [
					{
						"$ref": "#/components/parameters/idPathParam"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Address"
							}
						},
						"application/xml": {
							"schema": {
								"$ref": "#/components/schemas/Address"
							}
						}
					},
					"required": true
				},
				"responses": {
					"201": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Order"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Order"
								}
							}
						},
						"description": "Created"
					},
					"202": {
						"description": "Async"
					},
					"204": {
						"description": "Updated"
					},
					"400": {
						"description": "Invalid input"
					},
					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						},
						"description": "Unexpected error"
					}
				},
				"security": [
					{
						"BasicAuth": []
					},
					{
						"BearerAuth": []
					},
					{
						"OAuth2": [
							"CommerceOpenApiAdmin.write"
						]
					}
				],
				"summary": "Updates a shipping Address related to an Order.",
				"tags": [
					"Order"
				],
				"x-liferay-context": [
					"language"
				]
			}
		},
		"/product/": {
			"get": {
				"operationId": "getProducts",
				"parameters": [
					{
						"$ref": "#/components/parameters/groupQueryParam"
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Product"
									},
									"type": "array"
								}
							},
							"application/xml": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Product"
									},
									"type": "array"
								}
							}
						},
						"description": "Successful operation"
					},
					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						},
						"description": "Unexpected error"
					}
				},
				"security": [
					{
						"BasicAuth": []
					},
					{
						"BearerAuth": []
					},
					{
						"OAuth2": [
							"CommerceOpenApiAdmin.read"
						]
					}
				],
				"summary": "Gets a list of Products.",
				"tags": [
					"Product"
				]
			},
			"post": {
				"operationId": "upsertProduct",
				"parameters": [
					{
						"$ref": "#/components/parameters/groupQueryParam"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Product"
							}
						},
						"application/xml": {
							"schema": {
								"$ref": "#/components/schemas/Product"
							}
						}
					},
					"required": true
				},
				"responses": {
					"201": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Product"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Product"
								}
							}
						},
						"description": "Created"
					},
					"202": {
						"description": "Accepted - Async"
					},
					"204": {
						"description": "Updated"
					},
					"400": {
						"description": "Invalid input"
					},
					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						},
						"description": "Unexpected error"
					}
				},
				"security": [
					{
						"BasicAuth": []
					},
					{
						"BearerAuth": []
					},
					{
						"OAuth2": [
							"CommerceOpenApiAdmin.write"
						]
					}
				],
				"summary": "Creates or updates a Product.",
				"tags": [
					"Product"
				],
				"x-liferay-context": [
					"language"
				]
			}
		},
		"/product/{id}/sku": {
			"get": {
				"operationId": "getSkus",
				"parameters": [
					{
						"$ref": "#/components/parameters/idPathParam"
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Sku"
									},
									"type": "array"
								}
							},
							"application/xml": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Sku"
									},
									"type": "array"
								}
							}
						},
						"description": "Successful operation"
					},
					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						},
						"description": "Unexpected error"
					}
				},
				"security": [
					{
						"BasicAuth": []
					},
					{
						"BearerAuth": []
					},
					{
						"OAuth2": [
							"CommerceOpenApiAdmin.read"
						]
					}
				],
				"summary": "Gets a list of Skus related to a Product.",
				"tags": [
					"Product"
				]
			},
			"post": {
				"operationId": "upsertSku",
				"parameters": [
					{
						"$ref": "#/components/parameters/idPathParam"
					},
					{
						"$ref": "#/components/parameters/groupQueryParam"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Sku"
							}
						},
						"application/xml": {
							"schema": {
								"$ref": "#/components/schemas/Sku"
							}
						}
					},
					"required": true
				},
				"responses": {
					"201": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Sku"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Sku"
								}
							}
						},
						"description": "Created"
					},
					"202": {
						"description": "Accepted - Async"
					},
					"204": {
						"description": "Updated"
					},
					"400": {
						"description": "Invalid input"
					},
					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						},
						"description": "Unexpected error"
					}
				},
				"security": [
					{
						"BasicAuth": []
					},
					{
						"BearerAuth": []
					},
					{
						"OAuth2": [
							"CommerceOpenApiAdmin.write"
						]
					}
				],
				"summary": "Creates or updates a Sku related to a Product.",
				"tags": [
					"Product"
				],
				"x-liferay-context": [
					"language"
				]
			}
		},
		"/sku/{id}": {
			"delete": {
				"operationId": "deleteSku",
				"parameters": [
					{
						"$ref": "#/components/parameters/idPathParam"
					}
				],
				"responses": {
					"204": {
						"description": "No content"
					},
					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					}
				},
				"security": [
					{
						"BasicAuth": []
					},
					{
						"BearerAuth": []
					},
					{
						"OAuth2": [
							"CommerceOpenApiAdmin.write"
						]
					}
				],
				"summary": "Deletes a Sku by ID.",
				"tags": [
					"Sku"
				]
			},
			"get": {
				"operationId": "getSku",
				"parameters": [
					{
						"$ref": "#/components/parameters/idPathParam"
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Sku"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Sku"
								}
							}
						},
						"description": "Successful operation"
					},
					"400": {
						"description": "Invalid input"
					},
					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						},
						"description": "Unexpected error"
					}
				},
				"security": [
					{
						"BasicAuth": []
					},
					{
						"BearerAuth": []
					},
					{
						"OAuth2": [
							"CommerceOpenApiAdmin.read"
						]
					}
				],
				"summary": "Gets a Sku by ID.",
				"tags": [
					"Sku"
				]
			},
			"put": {
				"operationId": "updateSku",
				"parameters": [
					{
						"$ref": "#/components/parameters/idPathParam"
					},
					{
						"$ref": "#/components/parameters/groupQueryParam"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Sku"
							}
						},
						"application/xml": {
							"schema": {
								"$ref": "#/components/schemas/Sku"
							}
						}
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "Created"
					},
					"202": {
						"description": "Async"
					},
					"400": {
						"description": "Invalid input"
					},
					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						},
						"description": "Unexpected error"
					}
				},
				"security": [
					{
						"BasicAuth": []
					},
					{
						"BearerAuth": []
					},
					{
						"OAuth2": [
							"CommerceOpenApiAdmin.write"
						]
					}
				],
				"summary": "Updates a Sku by ID.",
				"tags": [
					"Sku"
				],
				"x-liferay-context": [
					"language"
				]
			}
		},
		"/sku/{id}/inventory": {
			"get": {
				"operationId": "getInventories",
				"parameters": [
					{
						"$ref": "#/components/parameters/idPathParam"
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Inventory"
									},
									"type": "array"
								}
							},
							"application/xml": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Inventory"
									},
									"type": "array"
								}
							}
						},
						"description": "Successful operation"
					},
					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						},
						"description": "Unexpected error"
					}
				},
				"security": [
					{
						"BasicAuth": []
					},
					{
						"BearerAuth": []
					},
					{
						"OAuth2": [
							"CommerceOpenApiAdmin.read"
						]
					}
				],
				"summary": "Gets a list of Inventories.",
				"tags": [
					"Sku"
				]
			},
			"post": {
				"operationId": "upsertInventory",
				"parameters": [
					{
						"$ref": "#/components/parameters/idPathParam"
					},
					{
						"$ref": "#/components/parameters/groupQueryParam"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Inventory"
							}
						},
						"application/xml": {
							"schema": {
								"$ref": "#/components/schemas/Inventory"
							}
						}
					},
					"required": true
				},
				"responses": {
					"201": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Inventory"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Inventory"
								}
							}
						},
						"description": "Created"
					},
					"202": {
						"description": "Accepted - Async"
					},
					"204": {
						"description": "Updated"
					},
					"400": {
						"description": "Invalid input"
					},
					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						},
						"description": "Unexpected error"
					}
				},
				"security": [
					{
						"BasicAuth": []
					},
					{
						"BearerAuth": []
					},
					{
						"OAuth2": [
							"CommerceOpenApiAdmin.write"
						]
					}
				],
				"summary": "Creates or updates a Inventory related to a Sku.",
				"tags": [
					"Sku"
				]
			}
		}
	},
	"tags": [
		{
			"description": "Operations on Account",
			"name": "Account"
		},
		{
			"description": "Operations on Countries",
			"name": "Country"
		},
		{
			"description": "Operations on Currencies",
			"name": "Currency"
		},
		{
			"description": "Operations on Inventories",
			"name": "Inventory"
		},
		{
			"description": "Operations on Orders",
			"name": "Order"
		},
		{
			"description": "Operations on Price Entry",
			"name": "PriceEntry"
		},
		{
			"description": "Operations on Price Lists",
			"name": "PriceList"
		},
		{
			"description": "Operations on Products",
			"name": "Product"
		},
		{
			"description": "Operations on Product Options",
			"name": "ProductOption"
		},
		{
			"description": "Operations on Product Option Values",
			"name": "ProductOptionValue"
		},
		{
			"description": "Operations on Regions",
			"name": "Region"
		},
		{
			"description": "Operations on Skus",
			"name": "Sku"
		},
		{
			"description": "Operations on Users",
			"name": "User"
		},
		{
			"description": "Operations on Web Sites",
			"name": "WebSite"
		}
	]
}