import com.liferay.gradle.plugins.source.formatter.FormatSourceTask;
import com.liferay.gradle.util.GradleUtil

task deploy(overwrite: true)
task formatSourceModule(type: FormatSourceTask)
task generateRestModule(type: JavaExec)
task runClass(type: JavaExec)

dependencies {
	compile group: "com.fasterxml.jackson.core", name: "jackson-databind", version: "2.6.7.1"
	compile group: "com.liferay", name: "com.liferay.petra.json.web.service.client", version: "11.0.0"
	compile group: "javax.ws.rs", name: "javax.ws.rs-api", version: "2.0.1"
	compile group: "org.apache.httpcomponents", name: "httpasyncclient", version: "4.1.3"
	compile group: "org.apache.httpcomponents", name: "httpclient", version: "4.5.3"
	compile group: "org.apache.httpcomponents", name: "httpcore", version: "4.4.6"
	compile group: "org.apache.httpcomponents", name: "httpcore-nio", version: "4.4.6"
	compile group: "org.slf4j", name: "slf4j-api", version: "1.7.2"
	compile group: "org.slf4j", name: "slf4j-log4j12", version: "1.7.2"

	compileOnly group: "com.fasterxml.jackson.core", name: "jackson-core", version: "2.6.7"
}

deploy {
	doLast {
		println('Use `generateRestModule` task for generating the OpenAPI module.')
	}
}

formatSourceModule {
	String osgiModuleName = GradleUtil.getProperty(project, "osgi.module.name", "")
	String osgiModuleRootPath = GradleUtil.getProperty(project, "osgi.module.root.path", "")

	def properties = new Properties()

	file("src/main/resources/com.liferay.commerce.openapi.util.generator.OSGiRESTModuleGenerator.config").withInputStream {
		properties.load(it)
	}

	if (osgiModuleName == "") {
		osgiModuleName = properties.get("osgi.module.name")
	}

	if (osgiModuleRootPath == "") {
		osgiModuleRootPath = properties.get("osgi.module.root.path")
	}

	baseDirName = osgiModuleRootPath + "/" + osgiModuleName
}

generateRestModule {
	finalizedBy formatSourceModule

	classpath = sourceSets.main.runtimeClasspath
	main = "com.liferay.commerce.openapi.util.generator.OSGiRESTModuleGenerator"

	def extensionContainer = project.getExtensions()

	def extraPropertiesExtension = extensionContainer.getExtraProperties()

	def projectProperties = extraPropertiesExtension.properties.entrySet()

	List<String> mainClassArgs = new ArrayList<>();

	for (int i; i < projectProperties.size(); i++) {
		Map.Entry property = projectProperties.getAt(i);

		String key = property.getKey()

		if (!key.startsWith("osgi.module")) {
			continue;
		}

		mainClassArgs.add(key + "=" + GradleUtil.getProperty(project, key, ""));
	}

	args mainClassArgs

	jvmArgs "-Dlog4j.configuration=log4j.xml"
}

runClass {
	classpath = sourceSets.main.runtimeClasspath
	main = GradleUtil.getProperty(project, "mainClass", "")

	jvmArgs "-Dlog4j.configuration=log4j.xml"
}