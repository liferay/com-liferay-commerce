/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.commerce.account.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.commerce.account.model.CommerceAccount;
import com.liferay.commerce.account.model.CommerceAccountModel;
import com.liferay.commerce.account.model.CommerceAccountSoap;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CommerceAccount service. Represents a row in the &quot;CommerceAccount&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>CommerceAccountModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CommerceAccountImpl}.
 * </p>
 *
 * @author Marco Leo
 * @see CommerceAccountImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class CommerceAccountModelImpl
	extends BaseModelImpl<CommerceAccount> implements CommerceAccountModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a commerce account model instance should use the <code>CommerceAccount</code> interface instead.
	 */
	public static final String TABLE_NAME = "CommerceAccount";

	public static final Object[][] TABLE_COLUMNS = {
		{"externalReferenceCode", Types.VARCHAR},
		{"commerceAccountId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"parentCommerceAccountId", Types.BIGINT}, {"name", Types.VARCHAR},
		{"logoId", Types.BIGINT}, {"email", Types.VARCHAR},
		{"taxId", Types.VARCHAR}, {"type_", Types.INTEGER},
		{"active_", Types.BOOLEAN}, {"displayDate", Types.TIMESTAMP},
		{"expirationDate", Types.TIMESTAMP},
		{"lastPublishDate", Types.TIMESTAMP}, {"status", Types.INTEGER},
		{"statusByUserId", Types.BIGINT}, {"statusByUserName", Types.VARCHAR},
		{"statusDate", Types.TIMESTAMP},
		{"defaultBillingAddressId", Types.BIGINT},
		{"defaultShippingAddressId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("externalReferenceCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("commerceAccountId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("parentCommerceAccountId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("logoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("taxId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("type_", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("active_", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("displayDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("expirationDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("lastPublishDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("defaultBillingAddressId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("defaultShippingAddressId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table CommerceAccount (externalReferenceCode VARCHAR(75) null,commerceAccountId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,parentCommerceAccountId LONG,name VARCHAR(255) null,logoId LONG,email VARCHAR(75) null,taxId VARCHAR(75) null,type_ INTEGER,active_ BOOLEAN,displayDate DATE null,expirationDate DATE null,lastPublishDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,defaultBillingAddressId LONG,defaultShippingAddressId LONG)";

	public static final String TABLE_SQL_DROP = "drop table CommerceAccount";

	public static final String ORDER_BY_JPQL =
		" ORDER BY commerceAccount.name ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY CommerceAccount.name ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		com.liferay.commerce.account.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.com.liferay.commerce.account.model.CommerceAccount"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		com.liferay.commerce.account.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.com.liferay.commerce.account.model.CommerceAccount"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		com.liferay.commerce.account.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.com.liferay.commerce.account.model.CommerceAccount"),
		true);

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long EXTERNALREFERENCECODE_COLUMN_BITMASK = 2L;

	public static final long TYPE_COLUMN_BITMASK = 4L;

	public static final long USERID_COLUMN_BITMASK = 8L;

	public static final long NAME_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CommerceAccount toModel(CommerceAccountSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CommerceAccount model = new CommerceAccountImpl();

		model.setExternalReferenceCode(soapModel.getExternalReferenceCode());
		model.setCommerceAccountId(soapModel.getCommerceAccountId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setParentCommerceAccountId(
			soapModel.getParentCommerceAccountId());
		model.setName(soapModel.getName());
		model.setLogoId(soapModel.getLogoId());
		model.setEmail(soapModel.getEmail());
		model.setTaxId(soapModel.getTaxId());
		model.setType(soapModel.getType());
		model.setActive(soapModel.isActive());
		model.setDisplayDate(soapModel.getDisplayDate());
		model.setExpirationDate(soapModel.getExpirationDate());
		model.setLastPublishDate(soapModel.getLastPublishDate());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());
		model.setDefaultBillingAddressId(
			soapModel.getDefaultBillingAddressId());
		model.setDefaultShippingAddressId(
			soapModel.getDefaultShippingAddressId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CommerceAccount> toModels(
		CommerceAccountSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<CommerceAccount> models = new ArrayList<CommerceAccount>(
			soapModels.length);

		for (CommerceAccountSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		com.liferay.commerce.account.service.util.ServiceProps.get(
			"lock.expiration.time.com.liferay.commerce.account.model.CommerceAccount"));

	public CommerceAccountModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _commerceAccountId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCommerceAccountId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _commerceAccountId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CommerceAccount.class;
	}

	@Override
	public String getModelClassName() {
		return CommerceAccount.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CommerceAccount, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CommerceAccount, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CommerceAccount, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((CommerceAccount)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CommerceAccount, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CommerceAccount, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CommerceAccount)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CommerceAccount, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CommerceAccount, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, CommerceAccount>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			CommerceAccount.class.getClassLoader(), CommerceAccount.class,
			ModelWrapper.class);

		try {
			Constructor<CommerceAccount> constructor =
				(Constructor<CommerceAccount>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<CommerceAccount, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<CommerceAccount, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<CommerceAccount, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<CommerceAccount, Object>>();
		Map<String, BiConsumer<CommerceAccount, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<CommerceAccount, ?>>();

		attributeGetterFunctions.put(
			"externalReferenceCode",
			new Function<CommerceAccount, Object>() {

				@Override
				public Object apply(CommerceAccount commerceAccount) {
					return commerceAccount.getExternalReferenceCode();
				}

			});
		attributeSetterBiConsumers.put(
			"externalReferenceCode",
			new BiConsumer<CommerceAccount, Object>() {

				@Override
				public void accept(
					CommerceAccount commerceAccount,
					Object externalReferenceCode) {

					commerceAccount.setExternalReferenceCode(
						(String)externalReferenceCode);
				}

			});
		attributeGetterFunctions.put(
			"commerceAccountId",
			new Function<CommerceAccount, Object>() {

				@Override
				public Object apply(CommerceAccount commerceAccount) {
					return commerceAccount.getCommerceAccountId();
				}

			});
		attributeSetterBiConsumers.put(
			"commerceAccountId",
			new BiConsumer<CommerceAccount, Object>() {

				@Override
				public void accept(
					CommerceAccount commerceAccount, Object commerceAccountId) {

					commerceAccount.setCommerceAccountId(
						(Long)commerceAccountId);
				}

			});
		attributeGetterFunctions.put(
			"companyId",
			new Function<CommerceAccount, Object>() {

				@Override
				public Object apply(CommerceAccount commerceAccount) {
					return commerceAccount.getCompanyId();
				}

			});
		attributeSetterBiConsumers.put(
			"companyId",
			new BiConsumer<CommerceAccount, Object>() {

				@Override
				public void accept(
					CommerceAccount commerceAccount, Object companyId) {

					commerceAccount.setCompanyId((Long)companyId);
				}

			});
		attributeGetterFunctions.put(
			"userId",
			new Function<CommerceAccount, Object>() {

				@Override
				public Object apply(CommerceAccount commerceAccount) {
					return commerceAccount.getUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"userId",
			new BiConsumer<CommerceAccount, Object>() {

				@Override
				public void accept(
					CommerceAccount commerceAccount, Object userId) {

					commerceAccount.setUserId((Long)userId);
				}

			});
		attributeGetterFunctions.put(
			"userName",
			new Function<CommerceAccount, Object>() {

				@Override
				public Object apply(CommerceAccount commerceAccount) {
					return commerceAccount.getUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"userName",
			new BiConsumer<CommerceAccount, Object>() {

				@Override
				public void accept(
					CommerceAccount commerceAccount, Object userName) {

					commerceAccount.setUserName((String)userName);
				}

			});
		attributeGetterFunctions.put(
			"createDate",
			new Function<CommerceAccount, Object>() {

				@Override
				public Object apply(CommerceAccount commerceAccount) {
					return commerceAccount.getCreateDate();
				}

			});
		attributeSetterBiConsumers.put(
			"createDate",
			new BiConsumer<CommerceAccount, Object>() {

				@Override
				public void accept(
					CommerceAccount commerceAccount, Object createDate) {

					commerceAccount.setCreateDate((Date)createDate);
				}

			});
		attributeGetterFunctions.put(
			"modifiedDate",
			new Function<CommerceAccount, Object>() {

				@Override
				public Object apply(CommerceAccount commerceAccount) {
					return commerceAccount.getModifiedDate();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedDate",
			new BiConsumer<CommerceAccount, Object>() {

				@Override
				public void accept(
					CommerceAccount commerceAccount, Object modifiedDate) {

					commerceAccount.setModifiedDate((Date)modifiedDate);
				}

			});
		attributeGetterFunctions.put(
			"parentCommerceAccountId",
			new Function<CommerceAccount, Object>() {

				@Override
				public Object apply(CommerceAccount commerceAccount) {
					return commerceAccount.getParentCommerceAccountId();
				}

			});
		attributeSetterBiConsumers.put(
			"parentCommerceAccountId",
			new BiConsumer<CommerceAccount, Object>() {

				@Override
				public void accept(
					CommerceAccount commerceAccount,
					Object parentCommerceAccountId) {

					commerceAccount.setParentCommerceAccountId(
						(Long)parentCommerceAccountId);
				}

			});
		attributeGetterFunctions.put(
			"name",
			new Function<CommerceAccount, Object>() {

				@Override
				public Object apply(CommerceAccount commerceAccount) {
					return commerceAccount.getName();
				}

			});
		attributeSetterBiConsumers.put(
			"name",
			new BiConsumer<CommerceAccount, Object>() {

				@Override
				public void accept(
					CommerceAccount commerceAccount, Object name) {

					commerceAccount.setName((String)name);
				}

			});
		attributeGetterFunctions.put(
			"logoId",
			new Function<CommerceAccount, Object>() {

				@Override
				public Object apply(CommerceAccount commerceAccount) {
					return commerceAccount.getLogoId();
				}

			});
		attributeSetterBiConsumers.put(
			"logoId",
			new BiConsumer<CommerceAccount, Object>() {

				@Override
				public void accept(
					CommerceAccount commerceAccount, Object logoId) {

					commerceAccount.setLogoId((Long)logoId);
				}

			});
		attributeGetterFunctions.put(
			"email",
			new Function<CommerceAccount, Object>() {

				@Override
				public Object apply(CommerceAccount commerceAccount) {
					return commerceAccount.getEmail();
				}

			});
		attributeSetterBiConsumers.put(
			"email",
			new BiConsumer<CommerceAccount, Object>() {

				@Override
				public void accept(
					CommerceAccount commerceAccount, Object email) {

					commerceAccount.setEmail((String)email);
				}

			});
		attributeGetterFunctions.put(
			"taxId",
			new Function<CommerceAccount, Object>() {

				@Override
				public Object apply(CommerceAccount commerceAccount) {
					return commerceAccount.getTaxId();
				}

			});
		attributeSetterBiConsumers.put(
			"taxId",
			new BiConsumer<CommerceAccount, Object>() {

				@Override
				public void accept(
					CommerceAccount commerceAccount, Object taxId) {

					commerceAccount.setTaxId((String)taxId);
				}

			});
		attributeGetterFunctions.put(
			"type",
			new Function<CommerceAccount, Object>() {

				@Override
				public Object apply(CommerceAccount commerceAccount) {
					return commerceAccount.getType();
				}

			});
		attributeSetterBiConsumers.put(
			"type",
			new BiConsumer<CommerceAccount, Object>() {

				@Override
				public void accept(
					CommerceAccount commerceAccount, Object type) {

					commerceAccount.setType((Integer)type);
				}

			});
		attributeGetterFunctions.put(
			"active",
			new Function<CommerceAccount, Object>() {

				@Override
				public Object apply(CommerceAccount commerceAccount) {
					return commerceAccount.getActive();
				}

			});
		attributeSetterBiConsumers.put(
			"active",
			new BiConsumer<CommerceAccount, Object>() {

				@Override
				public void accept(
					CommerceAccount commerceAccount, Object active) {

					commerceAccount.setActive((Boolean)active);
				}

			});
		attributeGetterFunctions.put(
			"displayDate",
			new Function<CommerceAccount, Object>() {

				@Override
				public Object apply(CommerceAccount commerceAccount) {
					return commerceAccount.getDisplayDate();
				}

			});
		attributeSetterBiConsumers.put(
			"displayDate",
			new BiConsumer<CommerceAccount, Object>() {

				@Override
				public void accept(
					CommerceAccount commerceAccount, Object displayDate) {

					commerceAccount.setDisplayDate((Date)displayDate);
				}

			});
		attributeGetterFunctions.put(
			"expirationDate",
			new Function<CommerceAccount, Object>() {

				@Override
				public Object apply(CommerceAccount commerceAccount) {
					return commerceAccount.getExpirationDate();
				}

			});
		attributeSetterBiConsumers.put(
			"expirationDate",
			new BiConsumer<CommerceAccount, Object>() {

				@Override
				public void accept(
					CommerceAccount commerceAccount, Object expirationDate) {

					commerceAccount.setExpirationDate((Date)expirationDate);
				}

			});
		attributeGetterFunctions.put(
			"lastPublishDate",
			new Function<CommerceAccount, Object>() {

				@Override
				public Object apply(CommerceAccount commerceAccount) {
					return commerceAccount.getLastPublishDate();
				}

			});
		attributeSetterBiConsumers.put(
			"lastPublishDate",
			new BiConsumer<CommerceAccount, Object>() {

				@Override
				public void accept(
					CommerceAccount commerceAccount, Object lastPublishDate) {

					commerceAccount.setLastPublishDate((Date)lastPublishDate);
				}

			});
		attributeGetterFunctions.put(
			"status",
			new Function<CommerceAccount, Object>() {

				@Override
				public Object apply(CommerceAccount commerceAccount) {
					return commerceAccount.getStatus();
				}

			});
		attributeSetterBiConsumers.put(
			"status",
			new BiConsumer<CommerceAccount, Object>() {

				@Override
				public void accept(
					CommerceAccount commerceAccount, Object status) {

					commerceAccount.setStatus((Integer)status);
				}

			});
		attributeGetterFunctions.put(
			"statusByUserId",
			new Function<CommerceAccount, Object>() {

				@Override
				public Object apply(CommerceAccount commerceAccount) {
					return commerceAccount.getStatusByUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"statusByUserId",
			new BiConsumer<CommerceAccount, Object>() {

				@Override
				public void accept(
					CommerceAccount commerceAccount, Object statusByUserId) {

					commerceAccount.setStatusByUserId((Long)statusByUserId);
				}

			});
		attributeGetterFunctions.put(
			"statusByUserName",
			new Function<CommerceAccount, Object>() {

				@Override
				public Object apply(CommerceAccount commerceAccount) {
					return commerceAccount.getStatusByUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"statusByUserName",
			new BiConsumer<CommerceAccount, Object>() {

				@Override
				public void accept(
					CommerceAccount commerceAccount, Object statusByUserName) {

					commerceAccount.setStatusByUserName(
						(String)statusByUserName);
				}

			});
		attributeGetterFunctions.put(
			"statusDate",
			new Function<CommerceAccount, Object>() {

				@Override
				public Object apply(CommerceAccount commerceAccount) {
					return commerceAccount.getStatusDate();
				}

			});
		attributeSetterBiConsumers.put(
			"statusDate",
			new BiConsumer<CommerceAccount, Object>() {

				@Override
				public void accept(
					CommerceAccount commerceAccount, Object statusDate) {

					commerceAccount.setStatusDate((Date)statusDate);
				}

			});
		attributeGetterFunctions.put(
			"defaultBillingAddressId",
			new Function<CommerceAccount, Object>() {

				@Override
				public Object apply(CommerceAccount commerceAccount) {
					return commerceAccount.getDefaultBillingAddressId();
				}

			});
		attributeSetterBiConsumers.put(
			"defaultBillingAddressId",
			new BiConsumer<CommerceAccount, Object>() {

				@Override
				public void accept(
					CommerceAccount commerceAccount,
					Object defaultBillingAddressId) {

					commerceAccount.setDefaultBillingAddressId(
						(Long)defaultBillingAddressId);
				}

			});
		attributeGetterFunctions.put(
			"defaultShippingAddressId",
			new Function<CommerceAccount, Object>() {

				@Override
				public Object apply(CommerceAccount commerceAccount) {
					return commerceAccount.getDefaultShippingAddressId();
				}

			});
		attributeSetterBiConsumers.put(
			"defaultShippingAddressId",
			new BiConsumer<CommerceAccount, Object>() {

				@Override
				public void accept(
					CommerceAccount commerceAccount,
					Object defaultShippingAddressId) {

					commerceAccount.setDefaultShippingAddressId(
						(Long)defaultShippingAddressId);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getExternalReferenceCode() {
		if (_externalReferenceCode == null) {
			return "";
		}
		else {
			return _externalReferenceCode;
		}
	}

	@Override
	public void setExternalReferenceCode(String externalReferenceCode) {
		_columnBitmask |= EXTERNALREFERENCECODE_COLUMN_BITMASK;

		if (_originalExternalReferenceCode == null) {
			_originalExternalReferenceCode = _externalReferenceCode;
		}

		_externalReferenceCode = externalReferenceCode;
	}

	public String getOriginalExternalReferenceCode() {
		return GetterUtil.getString(_originalExternalReferenceCode);
	}

	@JSON
	@Override
	public long getCommerceAccountId() {
		return _commerceAccountId;
	}

	@Override
	public void setCommerceAccountId(long commerceAccountId) {
		_commerceAccountId = commerceAccountId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getParentCommerceAccountId() {
		return _parentCommerceAccountId;
	}

	@Override
	public void setParentCommerceAccountId(long parentCommerceAccountId) {
		_parentCommerceAccountId = parentCommerceAccountId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask = -1L;

		_name = name;
	}

	@JSON
	@Override
	public long getLogoId() {
		return _logoId;
	}

	@Override
	public void setLogoId(long logoId) {
		_logoId = logoId;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	@JSON
	@Override
	public String getTaxId() {
		if (_taxId == null) {
			return "";
		}
		else {
			return _taxId;
		}
	}

	@Override
	public void setTaxId(String taxId) {
		_taxId = taxId;
	}

	@JSON
	@Override
	public int getType() {
		return _type;
	}

	@Override
	public void setType(int type) {
		_columnBitmask |= TYPE_COLUMN_BITMASK;

		if (!_setOriginalType) {
			_setOriginalType = true;

			_originalType = _type;
		}

		_type = type;
	}

	public int getOriginalType() {
		return _originalType;
	}

	@JSON
	@Override
	public boolean getActive() {
		return _active;
	}

	@JSON
	@Override
	public boolean isActive() {
		return _active;
	}

	@Override
	public void setActive(boolean active) {
		_active = active;
	}

	@JSON
	@Override
	public Date getDisplayDate() {
		return _displayDate;
	}

	@Override
	public void setDisplayDate(Date displayDate) {
		_displayDate = displayDate;
	}

	@JSON
	@Override
	public Date getExpirationDate() {
		return _expirationDate;
	}

	@Override
	public void setExpirationDate(Date expirationDate) {
		_expirationDate = expirationDate;
	}

	@JSON
	@Override
	public Date getLastPublishDate() {
		return _lastPublishDate;
	}

	@Override
	public void setLastPublishDate(Date lastPublishDate) {
		_lastPublishDate = lastPublishDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@JSON
	@Override
	public long getDefaultBillingAddressId() {
		return _defaultBillingAddressId;
	}

	@Override
	public void setDefaultBillingAddressId(long defaultBillingAddressId) {
		_defaultBillingAddressId = defaultBillingAddressId;
	}

	@JSON
	@Override
	public long getDefaultShippingAddressId() {
		return _defaultShippingAddressId;
	}

	@Override
	public void setDefaultShippingAddressId(long defaultShippingAddressId) {
		_defaultShippingAddressId = defaultShippingAddressId;
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CommerceAccount.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CommerceAccount toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CommerceAccount>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CommerceAccountImpl commerceAccountImpl = new CommerceAccountImpl();

		commerceAccountImpl.setExternalReferenceCode(
			getExternalReferenceCode());
		commerceAccountImpl.setCommerceAccountId(getCommerceAccountId());
		commerceAccountImpl.setCompanyId(getCompanyId());
		commerceAccountImpl.setUserId(getUserId());
		commerceAccountImpl.setUserName(getUserName());
		commerceAccountImpl.setCreateDate(getCreateDate());
		commerceAccountImpl.setModifiedDate(getModifiedDate());
		commerceAccountImpl.setParentCommerceAccountId(
			getParentCommerceAccountId());
		commerceAccountImpl.setName(getName());
		commerceAccountImpl.setLogoId(getLogoId());
		commerceAccountImpl.setEmail(getEmail());
		commerceAccountImpl.setTaxId(getTaxId());
		commerceAccountImpl.setType(getType());
		commerceAccountImpl.setActive(isActive());
		commerceAccountImpl.setDisplayDate(getDisplayDate());
		commerceAccountImpl.setExpirationDate(getExpirationDate());
		commerceAccountImpl.setLastPublishDate(getLastPublishDate());
		commerceAccountImpl.setStatus(getStatus());
		commerceAccountImpl.setStatusByUserId(getStatusByUserId());
		commerceAccountImpl.setStatusByUserName(getStatusByUserName());
		commerceAccountImpl.setStatusDate(getStatusDate());
		commerceAccountImpl.setDefaultBillingAddressId(
			getDefaultBillingAddressId());
		commerceAccountImpl.setDefaultShippingAddressId(
			getDefaultShippingAddressId());

		commerceAccountImpl.resetOriginalValues();

		return commerceAccountImpl;
	}

	@Override
	public int compareTo(CommerceAccount commerceAccount) {
		int value = 0;

		value = getName().compareTo(commerceAccount.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CommerceAccount)) {
			return false;
		}

		CommerceAccount commerceAccount = (CommerceAccount)obj;

		long primaryKey = commerceAccount.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CommerceAccountModelImpl commerceAccountModelImpl = this;

		commerceAccountModelImpl._originalExternalReferenceCode =
			commerceAccountModelImpl._externalReferenceCode;

		commerceAccountModelImpl._originalCompanyId =
			commerceAccountModelImpl._companyId;

		commerceAccountModelImpl._setOriginalCompanyId = false;

		commerceAccountModelImpl._originalUserId =
			commerceAccountModelImpl._userId;

		commerceAccountModelImpl._setOriginalUserId = false;

		commerceAccountModelImpl._setModifiedDate = false;

		commerceAccountModelImpl._originalType = commerceAccountModelImpl._type;

		commerceAccountModelImpl._setOriginalType = false;

		commerceAccountModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CommerceAccount> toCacheModel() {
		CommerceAccountCacheModel commerceAccountCacheModel =
			new CommerceAccountCacheModel();

		commerceAccountCacheModel.externalReferenceCode =
			getExternalReferenceCode();

		String externalReferenceCode =
			commerceAccountCacheModel.externalReferenceCode;

		if ((externalReferenceCode != null) &&
			(externalReferenceCode.length() == 0)) {

			commerceAccountCacheModel.externalReferenceCode = null;
		}

		commerceAccountCacheModel.commerceAccountId = getCommerceAccountId();

		commerceAccountCacheModel.companyId = getCompanyId();

		commerceAccountCacheModel.userId = getUserId();

		commerceAccountCacheModel.userName = getUserName();

		String userName = commerceAccountCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			commerceAccountCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			commerceAccountCacheModel.createDate = createDate.getTime();
		}
		else {
			commerceAccountCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			commerceAccountCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			commerceAccountCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		commerceAccountCacheModel.parentCommerceAccountId =
			getParentCommerceAccountId();

		commerceAccountCacheModel.name = getName();

		String name = commerceAccountCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			commerceAccountCacheModel.name = null;
		}

		commerceAccountCacheModel.logoId = getLogoId();

		commerceAccountCacheModel.email = getEmail();

		String email = commerceAccountCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			commerceAccountCacheModel.email = null;
		}

		commerceAccountCacheModel.taxId = getTaxId();

		String taxId = commerceAccountCacheModel.taxId;

		if ((taxId != null) && (taxId.length() == 0)) {
			commerceAccountCacheModel.taxId = null;
		}

		commerceAccountCacheModel.type = getType();

		commerceAccountCacheModel.active = isActive();

		Date displayDate = getDisplayDate();

		if (displayDate != null) {
			commerceAccountCacheModel.displayDate = displayDate.getTime();
		}
		else {
			commerceAccountCacheModel.displayDate = Long.MIN_VALUE;
		}

		Date expirationDate = getExpirationDate();

		if (expirationDate != null) {
			commerceAccountCacheModel.expirationDate = expirationDate.getTime();
		}
		else {
			commerceAccountCacheModel.expirationDate = Long.MIN_VALUE;
		}

		Date lastPublishDate = getLastPublishDate();

		if (lastPublishDate != null) {
			commerceAccountCacheModel.lastPublishDate =
				lastPublishDate.getTime();
		}
		else {
			commerceAccountCacheModel.lastPublishDate = Long.MIN_VALUE;
		}

		commerceAccountCacheModel.status = getStatus();

		commerceAccountCacheModel.statusByUserId = getStatusByUserId();

		commerceAccountCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = commerceAccountCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			commerceAccountCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			commerceAccountCacheModel.statusDate = statusDate.getTime();
		}
		else {
			commerceAccountCacheModel.statusDate = Long.MIN_VALUE;
		}

		commerceAccountCacheModel.defaultBillingAddressId =
			getDefaultBillingAddressId();

		commerceAccountCacheModel.defaultShippingAddressId =
			getDefaultShippingAddressId();

		return commerceAccountCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CommerceAccount, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CommerceAccount, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CommerceAccount, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((CommerceAccount)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<CommerceAccount, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<CommerceAccount, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CommerceAccount, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((CommerceAccount)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CommerceAccount>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _externalReferenceCode;
	private String _originalExternalReferenceCode;
	private long _commerceAccountId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _parentCommerceAccountId;
	private String _name;
	private long _logoId;
	private String _email;
	private String _taxId;
	private int _type;
	private int _originalType;
	private boolean _setOriginalType;
	private boolean _active;
	private Date _displayDate;
	private Date _expirationDate;
	private Date _lastPublishDate;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private long _defaultBillingAddressId;
	private long _defaultShippingAddressId;
	private long _columnBitmask;
	private CommerceAccount _escapedModel;

}