/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.commerce.product.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.commerce.product.model.CPDisplayLayout;
import com.liferay.commerce.product.model.CPDisplayLayoutModel;
import com.liferay.commerce.product.model.CPDisplayLayoutSoap;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.Validator;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CPDisplayLayout service. Represents a row in the &quot;CPDisplayLayout&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>CPDisplayLayoutModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CPDisplayLayoutImpl}.
 * </p>
 *
 * @author Marco Leo
 * @see CPDisplayLayoutImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class CPDisplayLayoutModelImpl
	extends BaseModelImpl<CPDisplayLayout> implements CPDisplayLayoutModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a cp display layout model instance should use the <code>CPDisplayLayout</code> interface instead.
	 */
	public static final String TABLE_NAME = "CPDisplayLayout";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"CPDisplayLayoutId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"classNameId", Types.BIGINT}, {"classPK", Types.BIGINT},
		{"layoutUuid", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CPDisplayLayoutId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("classNameId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("classPK", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("layoutUuid", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table CPDisplayLayout (uuid_ VARCHAR(75) null,CPDisplayLayoutId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,classNameId LONG,classPK LONG,layoutUuid VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table CPDisplayLayout";

	public static final String ORDER_BY_JPQL =
		" ORDER BY cpDisplayLayout.CPDisplayLayoutId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY CPDisplayLayout.CPDisplayLayoutId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		com.liferay.commerce.product.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.com.liferay.commerce.product.model.CPDisplayLayout"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		com.liferay.commerce.product.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.com.liferay.commerce.product.model.CPDisplayLayout"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		com.liferay.commerce.product.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.com.liferay.commerce.product.model.CPDisplayLayout"),
		true);

	public static final long CLASSNAMEID_COLUMN_BITMASK = 1L;

	public static final long CLASSPK_COLUMN_BITMASK = 2L;

	public static final long COMPANYID_COLUMN_BITMASK = 4L;

	public static final long GROUPID_COLUMN_BITMASK = 8L;

	public static final long UUID_COLUMN_BITMASK = 16L;

	public static final long CPDISPLAYLAYOUTID_COLUMN_BITMASK = 32L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CPDisplayLayout toModel(CPDisplayLayoutSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CPDisplayLayout model = new CPDisplayLayoutImpl();

		model.setUuid(soapModel.getUuid());
		model.setCPDisplayLayoutId(soapModel.getCPDisplayLayoutId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setClassNameId(soapModel.getClassNameId());
		model.setClassPK(soapModel.getClassPK());
		model.setLayoutUuid(soapModel.getLayoutUuid());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CPDisplayLayout> toModels(
		CPDisplayLayoutSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<CPDisplayLayout> models = new ArrayList<CPDisplayLayout>(
			soapModels.length);

		for (CPDisplayLayoutSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		com.liferay.commerce.product.service.util.ServiceProps.get(
			"lock.expiration.time.com.liferay.commerce.product.model.CPDisplayLayout"));

	public CPDisplayLayoutModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _CPDisplayLayoutId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCPDisplayLayoutId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _CPDisplayLayoutId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CPDisplayLayout.class;
	}

	@Override
	public String getModelClassName() {
		return CPDisplayLayout.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CPDisplayLayout, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CPDisplayLayout, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CPDisplayLayout, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((CPDisplayLayout)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CPDisplayLayout, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CPDisplayLayout, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CPDisplayLayout)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CPDisplayLayout, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CPDisplayLayout, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, CPDisplayLayout>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			CPDisplayLayout.class.getClassLoader(), CPDisplayLayout.class,
			ModelWrapper.class);

		try {
			Constructor<CPDisplayLayout> constructor =
				(Constructor<CPDisplayLayout>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<CPDisplayLayout, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<CPDisplayLayout, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<CPDisplayLayout, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<CPDisplayLayout, Object>>();
		Map<String, BiConsumer<CPDisplayLayout, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<CPDisplayLayout, ?>>();

		attributeGetterFunctions.put(
			"uuid",
			new Function<CPDisplayLayout, Object>() {

				@Override
				public Object apply(CPDisplayLayout cpDisplayLayout) {
					return cpDisplayLayout.getUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"uuid",
			new BiConsumer<CPDisplayLayout, Object>() {

				@Override
				public void accept(
					CPDisplayLayout cpDisplayLayout, Object uuid) {

					cpDisplayLayout.setUuid((String)uuid);
				}

			});
		attributeGetterFunctions.put(
			"CPDisplayLayoutId",
			new Function<CPDisplayLayout, Object>() {

				@Override
				public Object apply(CPDisplayLayout cpDisplayLayout) {
					return cpDisplayLayout.getCPDisplayLayoutId();
				}

			});
		attributeSetterBiConsumers.put(
			"CPDisplayLayoutId",
			new BiConsumer<CPDisplayLayout, Object>() {

				@Override
				public void accept(
					CPDisplayLayout cpDisplayLayout, Object CPDisplayLayoutId) {

					cpDisplayLayout.setCPDisplayLayoutId(
						(Long)CPDisplayLayoutId);
				}

			});
		attributeGetterFunctions.put(
			"groupId",
			new Function<CPDisplayLayout, Object>() {

				@Override
				public Object apply(CPDisplayLayout cpDisplayLayout) {
					return cpDisplayLayout.getGroupId();
				}

			});
		attributeSetterBiConsumers.put(
			"groupId",
			new BiConsumer<CPDisplayLayout, Object>() {

				@Override
				public void accept(
					CPDisplayLayout cpDisplayLayout, Object groupId) {

					cpDisplayLayout.setGroupId((Long)groupId);
				}

			});
		attributeGetterFunctions.put(
			"companyId",
			new Function<CPDisplayLayout, Object>() {

				@Override
				public Object apply(CPDisplayLayout cpDisplayLayout) {
					return cpDisplayLayout.getCompanyId();
				}

			});
		attributeSetterBiConsumers.put(
			"companyId",
			new BiConsumer<CPDisplayLayout, Object>() {

				@Override
				public void accept(
					CPDisplayLayout cpDisplayLayout, Object companyId) {

					cpDisplayLayout.setCompanyId((Long)companyId);
				}

			});
		attributeGetterFunctions.put(
			"userId",
			new Function<CPDisplayLayout, Object>() {

				@Override
				public Object apply(CPDisplayLayout cpDisplayLayout) {
					return cpDisplayLayout.getUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"userId",
			new BiConsumer<CPDisplayLayout, Object>() {

				@Override
				public void accept(
					CPDisplayLayout cpDisplayLayout, Object userId) {

					cpDisplayLayout.setUserId((Long)userId);
				}

			});
		attributeGetterFunctions.put(
			"userName",
			new Function<CPDisplayLayout, Object>() {

				@Override
				public Object apply(CPDisplayLayout cpDisplayLayout) {
					return cpDisplayLayout.getUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"userName",
			new BiConsumer<CPDisplayLayout, Object>() {

				@Override
				public void accept(
					CPDisplayLayout cpDisplayLayout, Object userName) {

					cpDisplayLayout.setUserName((String)userName);
				}

			});
		attributeGetterFunctions.put(
			"createDate",
			new Function<CPDisplayLayout, Object>() {

				@Override
				public Object apply(CPDisplayLayout cpDisplayLayout) {
					return cpDisplayLayout.getCreateDate();
				}

			});
		attributeSetterBiConsumers.put(
			"createDate",
			new BiConsumer<CPDisplayLayout, Object>() {

				@Override
				public void accept(
					CPDisplayLayout cpDisplayLayout, Object createDate) {

					cpDisplayLayout.setCreateDate((Date)createDate);
				}

			});
		attributeGetterFunctions.put(
			"modifiedDate",
			new Function<CPDisplayLayout, Object>() {

				@Override
				public Object apply(CPDisplayLayout cpDisplayLayout) {
					return cpDisplayLayout.getModifiedDate();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedDate",
			new BiConsumer<CPDisplayLayout, Object>() {

				@Override
				public void accept(
					CPDisplayLayout cpDisplayLayout, Object modifiedDate) {

					cpDisplayLayout.setModifiedDate((Date)modifiedDate);
				}

			});
		attributeGetterFunctions.put(
			"classNameId",
			new Function<CPDisplayLayout, Object>() {

				@Override
				public Object apply(CPDisplayLayout cpDisplayLayout) {
					return cpDisplayLayout.getClassNameId();
				}

			});
		attributeSetterBiConsumers.put(
			"classNameId",
			new BiConsumer<CPDisplayLayout, Object>() {

				@Override
				public void accept(
					CPDisplayLayout cpDisplayLayout, Object classNameId) {

					cpDisplayLayout.setClassNameId((Long)classNameId);
				}

			});
		attributeGetterFunctions.put(
			"classPK",
			new Function<CPDisplayLayout, Object>() {

				@Override
				public Object apply(CPDisplayLayout cpDisplayLayout) {
					return cpDisplayLayout.getClassPK();
				}

			});
		attributeSetterBiConsumers.put(
			"classPK",
			new BiConsumer<CPDisplayLayout, Object>() {

				@Override
				public void accept(
					CPDisplayLayout cpDisplayLayout, Object classPK) {

					cpDisplayLayout.setClassPK((Long)classPK);
				}

			});
		attributeGetterFunctions.put(
			"layoutUuid",
			new Function<CPDisplayLayout, Object>() {

				@Override
				public Object apply(CPDisplayLayout cpDisplayLayout) {
					return cpDisplayLayout.getLayoutUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"layoutUuid",
			new BiConsumer<CPDisplayLayout, Object>() {

				@Override
				public void accept(
					CPDisplayLayout cpDisplayLayout, Object layoutUuid) {

					cpDisplayLayout.setLayoutUuid((String)layoutUuid);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getCPDisplayLayoutId() {
		return _CPDisplayLayoutId;
	}

	@Override
	public void setCPDisplayLayoutId(long CPDisplayLayoutId) {
		_CPDisplayLayoutId = CPDisplayLayoutId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getClassName() {
		if (getClassNameId() <= 0) {
			return "";
		}

		return PortalUtil.getClassName(getClassNameId());
	}

	@Override
	public void setClassName(String className) {
		long classNameId = 0;

		if (Validator.isNotNull(className)) {
			classNameId = PortalUtil.getClassNameId(className);
		}

		setClassNameId(classNameId);
	}

	@JSON
	@Override
	public long getClassNameId() {
		return _classNameId;
	}

	@Override
	public void setClassNameId(long classNameId) {
		_columnBitmask |= CLASSNAMEID_COLUMN_BITMASK;

		if (!_setOriginalClassNameId) {
			_setOriginalClassNameId = true;

			_originalClassNameId = _classNameId;
		}

		_classNameId = classNameId;
	}

	public long getOriginalClassNameId() {
		return _originalClassNameId;
	}

	@JSON
	@Override
	public long getClassPK() {
		return _classPK;
	}

	@Override
	public void setClassPK(long classPK) {
		_columnBitmask |= CLASSPK_COLUMN_BITMASK;

		if (!_setOriginalClassPK) {
			_setOriginalClassPK = true;

			_originalClassPK = _classPK;
		}

		_classPK = classPK;
	}

	public long getOriginalClassPK() {
		return _originalClassPK;
	}

	@JSON
	@Override
	public String getLayoutUuid() {
		if (_layoutUuid == null) {
			return "";
		}
		else {
			return _layoutUuid;
		}
	}

	@Override
	public void setLayoutUuid(String layoutUuid) {
		_layoutUuid = layoutUuid;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(CPDisplayLayout.class.getName()),
			getClassNameId());
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CPDisplayLayout.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CPDisplayLayout toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CPDisplayLayout>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CPDisplayLayoutImpl cpDisplayLayoutImpl = new CPDisplayLayoutImpl();

		cpDisplayLayoutImpl.setUuid(getUuid());
		cpDisplayLayoutImpl.setCPDisplayLayoutId(getCPDisplayLayoutId());
		cpDisplayLayoutImpl.setGroupId(getGroupId());
		cpDisplayLayoutImpl.setCompanyId(getCompanyId());
		cpDisplayLayoutImpl.setUserId(getUserId());
		cpDisplayLayoutImpl.setUserName(getUserName());
		cpDisplayLayoutImpl.setCreateDate(getCreateDate());
		cpDisplayLayoutImpl.setModifiedDate(getModifiedDate());
		cpDisplayLayoutImpl.setClassNameId(getClassNameId());
		cpDisplayLayoutImpl.setClassPK(getClassPK());
		cpDisplayLayoutImpl.setLayoutUuid(getLayoutUuid());

		cpDisplayLayoutImpl.resetOriginalValues();

		return cpDisplayLayoutImpl;
	}

	@Override
	public int compareTo(CPDisplayLayout cpDisplayLayout) {
		long primaryKey = cpDisplayLayout.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CPDisplayLayout)) {
			return false;
		}

		CPDisplayLayout cpDisplayLayout = (CPDisplayLayout)obj;

		long primaryKey = cpDisplayLayout.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CPDisplayLayoutModelImpl cpDisplayLayoutModelImpl = this;

		cpDisplayLayoutModelImpl._originalUuid = cpDisplayLayoutModelImpl._uuid;

		cpDisplayLayoutModelImpl._originalGroupId =
			cpDisplayLayoutModelImpl._groupId;

		cpDisplayLayoutModelImpl._setOriginalGroupId = false;

		cpDisplayLayoutModelImpl._originalCompanyId =
			cpDisplayLayoutModelImpl._companyId;

		cpDisplayLayoutModelImpl._setOriginalCompanyId = false;

		cpDisplayLayoutModelImpl._setModifiedDate = false;

		cpDisplayLayoutModelImpl._originalClassNameId =
			cpDisplayLayoutModelImpl._classNameId;

		cpDisplayLayoutModelImpl._setOriginalClassNameId = false;

		cpDisplayLayoutModelImpl._originalClassPK =
			cpDisplayLayoutModelImpl._classPK;

		cpDisplayLayoutModelImpl._setOriginalClassPK = false;

		cpDisplayLayoutModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CPDisplayLayout> toCacheModel() {
		CPDisplayLayoutCacheModel cpDisplayLayoutCacheModel =
			new CPDisplayLayoutCacheModel();

		cpDisplayLayoutCacheModel.uuid = getUuid();

		String uuid = cpDisplayLayoutCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			cpDisplayLayoutCacheModel.uuid = null;
		}

		cpDisplayLayoutCacheModel.CPDisplayLayoutId = getCPDisplayLayoutId();

		cpDisplayLayoutCacheModel.groupId = getGroupId();

		cpDisplayLayoutCacheModel.companyId = getCompanyId();

		cpDisplayLayoutCacheModel.userId = getUserId();

		cpDisplayLayoutCacheModel.userName = getUserName();

		String userName = cpDisplayLayoutCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			cpDisplayLayoutCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			cpDisplayLayoutCacheModel.createDate = createDate.getTime();
		}
		else {
			cpDisplayLayoutCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			cpDisplayLayoutCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			cpDisplayLayoutCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		cpDisplayLayoutCacheModel.classNameId = getClassNameId();

		cpDisplayLayoutCacheModel.classPK = getClassPK();

		cpDisplayLayoutCacheModel.layoutUuid = getLayoutUuid();

		String layoutUuid = cpDisplayLayoutCacheModel.layoutUuid;

		if ((layoutUuid != null) && (layoutUuid.length() == 0)) {
			cpDisplayLayoutCacheModel.layoutUuid = null;
		}

		return cpDisplayLayoutCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CPDisplayLayout, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CPDisplayLayout, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CPDisplayLayout, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((CPDisplayLayout)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<CPDisplayLayout, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<CPDisplayLayout, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CPDisplayLayout, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((CPDisplayLayout)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CPDisplayLayout>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private String _originalUuid;
	private long _CPDisplayLayoutId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _classNameId;
	private long _originalClassNameId;
	private boolean _setOriginalClassNameId;
	private long _classPK;
	private long _originalClassPK;
	private boolean _setOriginalClassPK;
	private String _layoutUuid;
	private long _columnBitmask;
	private CPDisplayLayout _escapedModel;

}