/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.commerce.product.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.commerce.product.model.CPRuleAssetCategoryRel;
import com.liferay.commerce.product.model.CPRuleAssetCategoryRelModel;
import com.liferay.commerce.product.model.CPRuleAssetCategoryRelSoap;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CPRuleAssetCategoryRel service. Represents a row in the &quot;CPRuleAssetCategoryRel&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>CPRuleAssetCategoryRelModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CPRuleAssetCategoryRelImpl}.
 * </p>
 *
 * @author Marco Leo
 * @see CPRuleAssetCategoryRelImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class CPRuleAssetCategoryRelModelImpl
	extends BaseModelImpl<CPRuleAssetCategoryRel>
	implements CPRuleAssetCategoryRelModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a cp rule asset category rel model instance should use the <code>CPRuleAssetCategoryRel</code> interface instead.
	 */
	public static final String TABLE_NAME = "CPRuleAssetCategoryRel";

	public static final Object[][] TABLE_COLUMNS = {
		{"CPRuleAssetCategoryRelId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"CPRuleId", Types.BIGINT},
		{"assetCategoryId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("CPRuleAssetCategoryRelId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("CPRuleId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("assetCategoryId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table CPRuleAssetCategoryRel (CPRuleAssetCategoryRelId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,CPRuleId LONG,assetCategoryId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table CPRuleAssetCategoryRel";

	public static final String ORDER_BY_JPQL =
		" ORDER BY cpRuleAssetCategoryRel.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY CPRuleAssetCategoryRel.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		com.liferay.commerce.product.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.com.liferay.commerce.product.model.CPRuleAssetCategoryRel"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		com.liferay.commerce.product.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.com.liferay.commerce.product.model.CPRuleAssetCategoryRel"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		com.liferay.commerce.product.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.com.liferay.commerce.product.model.CPRuleAssetCategoryRel"),
		true);

	public static final long CPRULEID_COLUMN_BITMASK = 1L;

	public static final long ASSETCATEGORYID_COLUMN_BITMASK = 2L;

	public static final long CREATEDATE_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CPRuleAssetCategoryRel toModel(
		CPRuleAssetCategoryRelSoap soapModel) {

		if (soapModel == null) {
			return null;
		}

		CPRuleAssetCategoryRel model = new CPRuleAssetCategoryRelImpl();

		model.setCPRuleAssetCategoryRelId(
			soapModel.getCPRuleAssetCategoryRelId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCPRuleId(soapModel.getCPRuleId());
		model.setAssetCategoryId(soapModel.getAssetCategoryId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CPRuleAssetCategoryRel> toModels(
		CPRuleAssetCategoryRelSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<CPRuleAssetCategoryRel> models =
			new ArrayList<CPRuleAssetCategoryRel>(soapModels.length);

		for (CPRuleAssetCategoryRelSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		com.liferay.commerce.product.service.util.ServiceProps.get(
			"lock.expiration.time.com.liferay.commerce.product.model.CPRuleAssetCategoryRel"));

	public CPRuleAssetCategoryRelModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _CPRuleAssetCategoryRelId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCPRuleAssetCategoryRelId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _CPRuleAssetCategoryRelId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CPRuleAssetCategoryRel.class;
	}

	@Override
	public String getModelClassName() {
		return CPRuleAssetCategoryRel.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CPRuleAssetCategoryRel, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CPRuleAssetCategoryRel, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CPRuleAssetCategoryRel, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((CPRuleAssetCategoryRel)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CPRuleAssetCategoryRel, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CPRuleAssetCategoryRel, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CPRuleAssetCategoryRel)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CPRuleAssetCategoryRel, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CPRuleAssetCategoryRel, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<CPRuleAssetCategoryRel, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<CPRuleAssetCategoryRel, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<CPRuleAssetCategoryRel, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<CPRuleAssetCategoryRel, Object>>();
		Map<String, BiConsumer<CPRuleAssetCategoryRel, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<CPRuleAssetCategoryRel, ?>>();

		attributeGetterFunctions.put(
			"CPRuleAssetCategoryRelId",
			new Function<CPRuleAssetCategoryRel, Object>() {

				@Override
				public Object apply(
					CPRuleAssetCategoryRel cpRuleAssetCategoryRel) {

					return cpRuleAssetCategoryRel.getCPRuleAssetCategoryRelId();
				}

			});
		attributeSetterBiConsumers.put(
			"CPRuleAssetCategoryRelId",
			new BiConsumer<CPRuleAssetCategoryRel, Object>() {

				@Override
				public void accept(
					CPRuleAssetCategoryRel cpRuleAssetCategoryRel,
					Object CPRuleAssetCategoryRelId) {

					cpRuleAssetCategoryRel.setCPRuleAssetCategoryRelId(
						(Long)CPRuleAssetCategoryRelId);
				}

			});
		attributeGetterFunctions.put(
			"groupId",
			new Function<CPRuleAssetCategoryRel, Object>() {

				@Override
				public Object apply(
					CPRuleAssetCategoryRel cpRuleAssetCategoryRel) {

					return cpRuleAssetCategoryRel.getGroupId();
				}

			});
		attributeSetterBiConsumers.put(
			"groupId",
			new BiConsumer<CPRuleAssetCategoryRel, Object>() {

				@Override
				public void accept(
					CPRuleAssetCategoryRel cpRuleAssetCategoryRel,
					Object groupId) {

					cpRuleAssetCategoryRel.setGroupId((Long)groupId);
				}

			});
		attributeGetterFunctions.put(
			"companyId",
			new Function<CPRuleAssetCategoryRel, Object>() {

				@Override
				public Object apply(
					CPRuleAssetCategoryRel cpRuleAssetCategoryRel) {

					return cpRuleAssetCategoryRel.getCompanyId();
				}

			});
		attributeSetterBiConsumers.put(
			"companyId",
			new BiConsumer<CPRuleAssetCategoryRel, Object>() {

				@Override
				public void accept(
					CPRuleAssetCategoryRel cpRuleAssetCategoryRel,
					Object companyId) {

					cpRuleAssetCategoryRel.setCompanyId((Long)companyId);
				}

			});
		attributeGetterFunctions.put(
			"userId",
			new Function<CPRuleAssetCategoryRel, Object>() {

				@Override
				public Object apply(
					CPRuleAssetCategoryRel cpRuleAssetCategoryRel) {

					return cpRuleAssetCategoryRel.getUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"userId",
			new BiConsumer<CPRuleAssetCategoryRel, Object>() {

				@Override
				public void accept(
					CPRuleAssetCategoryRel cpRuleAssetCategoryRel,
					Object userId) {

					cpRuleAssetCategoryRel.setUserId((Long)userId);
				}

			});
		attributeGetterFunctions.put(
			"userName",
			new Function<CPRuleAssetCategoryRel, Object>() {

				@Override
				public Object apply(
					CPRuleAssetCategoryRel cpRuleAssetCategoryRel) {

					return cpRuleAssetCategoryRel.getUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"userName",
			new BiConsumer<CPRuleAssetCategoryRel, Object>() {

				@Override
				public void accept(
					CPRuleAssetCategoryRel cpRuleAssetCategoryRel,
					Object userName) {

					cpRuleAssetCategoryRel.setUserName((String)userName);
				}

			});
		attributeGetterFunctions.put(
			"createDate",
			new Function<CPRuleAssetCategoryRel, Object>() {

				@Override
				public Object apply(
					CPRuleAssetCategoryRel cpRuleAssetCategoryRel) {

					return cpRuleAssetCategoryRel.getCreateDate();
				}

			});
		attributeSetterBiConsumers.put(
			"createDate",
			new BiConsumer<CPRuleAssetCategoryRel, Object>() {

				@Override
				public void accept(
					CPRuleAssetCategoryRel cpRuleAssetCategoryRel,
					Object createDate) {

					cpRuleAssetCategoryRel.setCreateDate((Date)createDate);
				}

			});
		attributeGetterFunctions.put(
			"modifiedDate",
			new Function<CPRuleAssetCategoryRel, Object>() {

				@Override
				public Object apply(
					CPRuleAssetCategoryRel cpRuleAssetCategoryRel) {

					return cpRuleAssetCategoryRel.getModifiedDate();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedDate",
			new BiConsumer<CPRuleAssetCategoryRel, Object>() {

				@Override
				public void accept(
					CPRuleAssetCategoryRel cpRuleAssetCategoryRel,
					Object modifiedDate) {

					cpRuleAssetCategoryRel.setModifiedDate((Date)modifiedDate);
				}

			});
		attributeGetterFunctions.put(
			"CPRuleId",
			new Function<CPRuleAssetCategoryRel, Object>() {

				@Override
				public Object apply(
					CPRuleAssetCategoryRel cpRuleAssetCategoryRel) {

					return cpRuleAssetCategoryRel.getCPRuleId();
				}

			});
		attributeSetterBiConsumers.put(
			"CPRuleId",
			new BiConsumer<CPRuleAssetCategoryRel, Object>() {

				@Override
				public void accept(
					CPRuleAssetCategoryRel cpRuleAssetCategoryRel,
					Object CPRuleId) {

					cpRuleAssetCategoryRel.setCPRuleId((Long)CPRuleId);
				}

			});
		attributeGetterFunctions.put(
			"assetCategoryId",
			new Function<CPRuleAssetCategoryRel, Object>() {

				@Override
				public Object apply(
					CPRuleAssetCategoryRel cpRuleAssetCategoryRel) {

					return cpRuleAssetCategoryRel.getAssetCategoryId();
				}

			});
		attributeSetterBiConsumers.put(
			"assetCategoryId",
			new BiConsumer<CPRuleAssetCategoryRel, Object>() {

				@Override
				public void accept(
					CPRuleAssetCategoryRel cpRuleAssetCategoryRel,
					Object assetCategoryId) {

					cpRuleAssetCategoryRel.setAssetCategoryId(
						(Long)assetCategoryId);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getCPRuleAssetCategoryRelId() {
		return _CPRuleAssetCategoryRelId;
	}

	@Override
	public void setCPRuleAssetCategoryRelId(long CPRuleAssetCategoryRelId) {
		_CPRuleAssetCategoryRelId = CPRuleAssetCategoryRelId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getCPRuleId() {
		return _CPRuleId;
	}

	@Override
	public void setCPRuleId(long CPRuleId) {
		_columnBitmask |= CPRULEID_COLUMN_BITMASK;

		if (!_setOriginalCPRuleId) {
			_setOriginalCPRuleId = true;

			_originalCPRuleId = _CPRuleId;
		}

		_CPRuleId = CPRuleId;
	}

	public long getOriginalCPRuleId() {
		return _originalCPRuleId;
	}

	@JSON
	@Override
	public long getAssetCategoryId() {
		return _assetCategoryId;
	}

	@Override
	public void setAssetCategoryId(long assetCategoryId) {
		_columnBitmask |= ASSETCATEGORYID_COLUMN_BITMASK;

		if (!_setOriginalAssetCategoryId) {
			_setOriginalAssetCategoryId = true;

			_originalAssetCategoryId = _assetCategoryId;
		}

		_assetCategoryId = assetCategoryId;
	}

	public long getOriginalAssetCategoryId() {
		return _originalAssetCategoryId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CPRuleAssetCategoryRel.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CPRuleAssetCategoryRel toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CPRuleAssetCategoryRel)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CPRuleAssetCategoryRelImpl cpRuleAssetCategoryRelImpl =
			new CPRuleAssetCategoryRelImpl();

		cpRuleAssetCategoryRelImpl.setCPRuleAssetCategoryRelId(
			getCPRuleAssetCategoryRelId());
		cpRuleAssetCategoryRelImpl.setGroupId(getGroupId());
		cpRuleAssetCategoryRelImpl.setCompanyId(getCompanyId());
		cpRuleAssetCategoryRelImpl.setUserId(getUserId());
		cpRuleAssetCategoryRelImpl.setUserName(getUserName());
		cpRuleAssetCategoryRelImpl.setCreateDate(getCreateDate());
		cpRuleAssetCategoryRelImpl.setModifiedDate(getModifiedDate());
		cpRuleAssetCategoryRelImpl.setCPRuleId(getCPRuleId());
		cpRuleAssetCategoryRelImpl.setAssetCategoryId(getAssetCategoryId());

		cpRuleAssetCategoryRelImpl.resetOriginalValues();

		return cpRuleAssetCategoryRelImpl;
	}

	@Override
	public int compareTo(CPRuleAssetCategoryRel cpRuleAssetCategoryRel) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), cpRuleAssetCategoryRel.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CPRuleAssetCategoryRel)) {
			return false;
		}

		CPRuleAssetCategoryRel cpRuleAssetCategoryRel =
			(CPRuleAssetCategoryRel)obj;

		long primaryKey = cpRuleAssetCategoryRel.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CPRuleAssetCategoryRelModelImpl cpRuleAssetCategoryRelModelImpl = this;

		cpRuleAssetCategoryRelModelImpl._setModifiedDate = false;

		cpRuleAssetCategoryRelModelImpl._originalCPRuleId =
			cpRuleAssetCategoryRelModelImpl._CPRuleId;

		cpRuleAssetCategoryRelModelImpl._setOriginalCPRuleId = false;

		cpRuleAssetCategoryRelModelImpl._originalAssetCategoryId =
			cpRuleAssetCategoryRelModelImpl._assetCategoryId;

		cpRuleAssetCategoryRelModelImpl._setOriginalAssetCategoryId = false;

		cpRuleAssetCategoryRelModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CPRuleAssetCategoryRel> toCacheModel() {
		CPRuleAssetCategoryRelCacheModel cpRuleAssetCategoryRelCacheModel =
			new CPRuleAssetCategoryRelCacheModel();

		cpRuleAssetCategoryRelCacheModel.CPRuleAssetCategoryRelId =
			getCPRuleAssetCategoryRelId();

		cpRuleAssetCategoryRelCacheModel.groupId = getGroupId();

		cpRuleAssetCategoryRelCacheModel.companyId = getCompanyId();

		cpRuleAssetCategoryRelCacheModel.userId = getUserId();

		cpRuleAssetCategoryRelCacheModel.userName = getUserName();

		String userName = cpRuleAssetCategoryRelCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			cpRuleAssetCategoryRelCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			cpRuleAssetCategoryRelCacheModel.createDate = createDate.getTime();
		}
		else {
			cpRuleAssetCategoryRelCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			cpRuleAssetCategoryRelCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			cpRuleAssetCategoryRelCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		cpRuleAssetCategoryRelCacheModel.CPRuleId = getCPRuleId();

		cpRuleAssetCategoryRelCacheModel.assetCategoryId = getAssetCategoryId();

		return cpRuleAssetCategoryRelCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CPRuleAssetCategoryRel, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CPRuleAssetCategoryRel, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CPRuleAssetCategoryRel, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(
				attributeGetterFunction.apply((CPRuleAssetCategoryRel)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<CPRuleAssetCategoryRel, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<CPRuleAssetCategoryRel, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CPRuleAssetCategoryRel, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((CPRuleAssetCategoryRel)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		CPRuleAssetCategoryRel.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		CPRuleAssetCategoryRel.class, ModelWrapper.class
	};

	private long _CPRuleAssetCategoryRelId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _CPRuleId;
	private long _originalCPRuleId;
	private boolean _setOriginalCPRuleId;
	private long _assetCategoryId;
	private long _originalAssetCategoryId;
	private boolean _setOriginalAssetCategoryId;
	private long _columnBitmask;
	private CPRuleAssetCategoryRel _escapedModel;

}