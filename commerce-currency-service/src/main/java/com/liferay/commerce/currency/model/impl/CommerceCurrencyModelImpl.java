/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.commerce.currency.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.commerce.currency.model.CommerceCurrency;
import com.liferay.commerce.currency.model.CommerceCurrencyModel;
import com.liferay.commerce.currency.model.CommerceCurrencySoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.petra.string.StringBundler;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.Validator;

import java.io.Serializable;

import java.math.BigDecimal;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the CommerceCurrency service. Represents a row in the &quot;CommerceCurrency&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CommerceCurrencyModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CommerceCurrencyImpl}.
 * </p>
 *
 * @author Andrea Di Giorgi
 * @see CommerceCurrencyImpl
 * @see CommerceCurrency
 * @see CommerceCurrencyModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class CommerceCurrencyModelImpl extends BaseModelImpl<CommerceCurrency>
	implements CommerceCurrencyModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a commerce currency model instance should use the {@link CommerceCurrency} interface instead.
	 */
	public static final String TABLE_NAME = "CommerceCurrency";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "commerceCurrencyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "code_", Types.VARCHAR },
			{ "name", Types.VARCHAR },
			{ "rate", Types.DECIMAL },
			{ "formatPattern", Types.VARCHAR },
			{ "maxFractionDigits", Types.INTEGER },
			{ "minFractionDigits", Types.INTEGER },
			{ "roundingMode", Types.VARCHAR },
			{ "primary_", Types.BOOLEAN },
			{ "priority", Types.DOUBLE },
			{ "active_", Types.BOOLEAN },
			{ "lastPublishDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("commerceCurrencyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("code_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rate", Types.DECIMAL);
		TABLE_COLUMNS_MAP.put("formatPattern", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("maxFractionDigits", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("minFractionDigits", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("roundingMode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("primary_", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("priority", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("active_", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("lastPublishDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table CommerceCurrency (uuid_ VARCHAR(75) null,commerceCurrencyId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,code_ VARCHAR(75) null,name STRING null,rate DECIMAL(30, 16) null,formatPattern STRING null,maxFractionDigits INTEGER,minFractionDigits INTEGER,roundingMode VARCHAR(75) null,primary_ BOOLEAN,priority DOUBLE,active_ BOOLEAN,lastPublishDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table CommerceCurrency";
	public static final String ORDER_BY_JPQL = " ORDER BY commerceCurrency.priority ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CommerceCurrency.priority ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.commerce.currency.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.commerce.currency.model.CommerceCurrency"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.commerce.currency.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.commerce.currency.model.CommerceCurrency"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.commerce.currency.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.commerce.currency.model.CommerceCurrency"),
			true);
	public static final long ACTIVE_COLUMN_BITMASK = 1L;
	public static final long CODE_COLUMN_BITMASK = 2L;
	public static final long COMPANYID_COLUMN_BITMASK = 4L;
	public static final long GROUPID_COLUMN_BITMASK = 8L;
	public static final long PRIMARY_COLUMN_BITMASK = 16L;
	public static final long UUID_COLUMN_BITMASK = 32L;
	public static final long PRIORITY_COLUMN_BITMASK = 64L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CommerceCurrency toModel(CommerceCurrencySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CommerceCurrency model = new CommerceCurrencyImpl();

		model.setUuid(soapModel.getUuid());
		model.setCommerceCurrencyId(soapModel.getCommerceCurrencyId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCode(soapModel.getCode());
		model.setName(soapModel.getName());
		model.setRate(soapModel.getRate());
		model.setFormatPattern(soapModel.getFormatPattern());
		model.setMaxFractionDigits(soapModel.getMaxFractionDigits());
		model.setMinFractionDigits(soapModel.getMinFractionDigits());
		model.setRoundingMode(soapModel.getRoundingMode());
		model.setPrimary(soapModel.isPrimary());
		model.setPriority(soapModel.getPriority());
		model.setActive(soapModel.isActive());
		model.setLastPublishDate(soapModel.getLastPublishDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CommerceCurrency> toModels(
		CommerceCurrencySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CommerceCurrency> models = new ArrayList<CommerceCurrency>(soapModels.length);

		for (CommerceCurrencySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.commerce.currency.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.commerce.currency.model.CommerceCurrency"));

	public CommerceCurrencyModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _commerceCurrencyId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCommerceCurrencyId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _commerceCurrencyId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CommerceCurrency.class;
	}

	@Override
	public String getModelClassName() {
		return CommerceCurrency.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("commerceCurrencyId", getCommerceCurrencyId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("code", getCode());
		attributes.put("name", getName());
		attributes.put("rate", getRate());
		attributes.put("formatPattern", getFormatPattern());
		attributes.put("maxFractionDigits", getMaxFractionDigits());
		attributes.put("minFractionDigits", getMinFractionDigits());
		attributes.put("roundingMode", getRoundingMode());
		attributes.put("primary", isPrimary());
		attributes.put("priority", getPriority());
		attributes.put("active", isActive());
		attributes.put("lastPublishDate", getLastPublishDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long commerceCurrencyId = (Long)attributes.get("commerceCurrencyId");

		if (commerceCurrencyId != null) {
			setCommerceCurrencyId(commerceCurrencyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String code = (String)attributes.get("code");

		if (code != null) {
			setCode(code);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		BigDecimal rate = (BigDecimal)attributes.get("rate");

		if (rate != null) {
			setRate(rate);
		}

		String formatPattern = (String)attributes.get("formatPattern");

		if (formatPattern != null) {
			setFormatPattern(formatPattern);
		}

		Integer maxFractionDigits = (Integer)attributes.get("maxFractionDigits");

		if (maxFractionDigits != null) {
			setMaxFractionDigits(maxFractionDigits);
		}

		Integer minFractionDigits = (Integer)attributes.get("minFractionDigits");

		if (minFractionDigits != null) {
			setMinFractionDigits(minFractionDigits);
		}

		String roundingMode = (String)attributes.get("roundingMode");

		if (roundingMode != null) {
			setRoundingMode(roundingMode);
		}

		Boolean primary = (Boolean)attributes.get("primary");

		if (primary != null) {
			setPrimary(primary);
		}

		Double priority = (Double)attributes.get("priority");

		if (priority != null) {
			setPriority(priority);
		}

		Boolean active = (Boolean)attributes.get("active");

		if (active != null) {
			setActive(active);
		}

		Date lastPublishDate = (Date)attributes.get("lastPublishDate");

		if (lastPublishDate != null) {
			setLastPublishDate(lastPublishDate);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getCommerceCurrencyId() {
		return _commerceCurrencyId;
	}

	@Override
	public void setCommerceCurrencyId(long commerceCurrencyId) {
		_commerceCurrencyId = commerceCurrencyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getCode() {
		if (_code == null) {
			return "";
		}
		else {
			return _code;
		}
	}

	@Override
	public void setCode(String code) {
		_columnBitmask |= CODE_COLUMN_BITMASK;

		if (_originalCode == null) {
			_originalCode = _code;
		}

		_code = code;
	}

	public String getOriginalCode() {
		return GetterUtil.getString(_originalCode);
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public String getName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getName(languageId);
	}

	@Override
	public String getName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getName(languageId, useDefault);
	}

	@Override
	public String getName(String languageId) {
		return LocalizationUtil.getLocalization(getName(), languageId);
	}

	@Override
	public String getName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getName(), languageId,
			useDefault);
	}

	@Override
	public String getNameCurrentLanguageId() {
		return _nameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getNameCurrentValue() {
		Locale locale = getLocale(_nameCurrentLanguageId);

		return getName(locale);
	}

	@Override
	public Map<Locale, String> getNameMap() {
		return LocalizationUtil.getLocalizationMap(getName());
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public void setName(String name, Locale locale) {
		setName(name, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setName(String name, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(name)) {
			setName(LocalizationUtil.updateLocalization(getName(), "Name",
					name, languageId, defaultLanguageId));
		}
		else {
			setName(LocalizationUtil.removeLocalization(getName(), "Name",
					languageId));
		}
	}

	@Override
	public void setNameCurrentLanguageId(String languageId) {
		_nameCurrentLanguageId = languageId;
	}

	@Override
	public void setNameMap(Map<Locale, String> nameMap) {
		setNameMap(nameMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setNameMap(Map<Locale, String> nameMap, Locale defaultLocale) {
		if (nameMap == null) {
			return;
		}

		setName(LocalizationUtil.updateLocalization(nameMap, getName(), "Name",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public BigDecimal getRate() {
		return _rate;
	}

	@Override
	public void setRate(BigDecimal rate) {
		_rate = rate;
	}

	@JSON
	@Override
	public String getFormatPattern() {
		if (_formatPattern == null) {
			return "";
		}
		else {
			return _formatPattern;
		}
	}

	@Override
	public String getFormatPattern(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getFormatPattern(languageId);
	}

	@Override
	public String getFormatPattern(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getFormatPattern(languageId, useDefault);
	}

	@Override
	public String getFormatPattern(String languageId) {
		return LocalizationUtil.getLocalization(getFormatPattern(), languageId);
	}

	@Override
	public String getFormatPattern(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getFormatPattern(), languageId,
			useDefault);
	}

	@Override
	public String getFormatPatternCurrentLanguageId() {
		return _formatPatternCurrentLanguageId;
	}

	@JSON
	@Override
	public String getFormatPatternCurrentValue() {
		Locale locale = getLocale(_formatPatternCurrentLanguageId);

		return getFormatPattern(locale);
	}

	@Override
	public Map<Locale, String> getFormatPatternMap() {
		return LocalizationUtil.getLocalizationMap(getFormatPattern());
	}

	@Override
	public void setFormatPattern(String formatPattern) {
		_formatPattern = formatPattern;
	}

	@Override
	public void setFormatPattern(String formatPattern, Locale locale) {
		setFormatPattern(formatPattern, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setFormatPattern(String formatPattern, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(formatPattern)) {
			setFormatPattern(LocalizationUtil.updateLocalization(
					getFormatPattern(), "FormatPattern", formatPattern,
					languageId, defaultLanguageId));
		}
		else {
			setFormatPattern(LocalizationUtil.removeLocalization(
					getFormatPattern(), "FormatPattern", languageId));
		}
	}

	@Override
	public void setFormatPatternCurrentLanguageId(String languageId) {
		_formatPatternCurrentLanguageId = languageId;
	}

	@Override
	public void setFormatPatternMap(Map<Locale, String> formatPatternMap) {
		setFormatPatternMap(formatPatternMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setFormatPatternMap(Map<Locale, String> formatPatternMap,
		Locale defaultLocale) {
		if (formatPatternMap == null) {
			return;
		}

		setFormatPattern(LocalizationUtil.updateLocalization(formatPatternMap,
				getFormatPattern(), "FormatPattern",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public int getMaxFractionDigits() {
		return _maxFractionDigits;
	}

	@Override
	public void setMaxFractionDigits(int maxFractionDigits) {
		_maxFractionDigits = maxFractionDigits;
	}

	@JSON
	@Override
	public int getMinFractionDigits() {
		return _minFractionDigits;
	}

	@Override
	public void setMinFractionDigits(int minFractionDigits) {
		_minFractionDigits = minFractionDigits;
	}

	@JSON
	@Override
	public String getRoundingMode() {
		if (_roundingMode == null) {
			return "";
		}
		else {
			return _roundingMode;
		}
	}

	@Override
	public void setRoundingMode(String roundingMode) {
		_roundingMode = roundingMode;
	}

	@JSON
	@Override
	public boolean getPrimary() {
		return _primary;
	}

	@JSON
	@Override
	public boolean isPrimary() {
		return _primary;
	}

	@Override
	public void setPrimary(boolean primary) {
		_columnBitmask |= PRIMARY_COLUMN_BITMASK;

		if (!_setOriginalPrimary) {
			_setOriginalPrimary = true;

			_originalPrimary = _primary;
		}

		_primary = primary;
	}

	public boolean getOriginalPrimary() {
		return _originalPrimary;
	}

	@JSON
	@Override
	public double getPriority() {
		return _priority;
	}

	@Override
	public void setPriority(double priority) {
		_columnBitmask = -1L;

		_priority = priority;
	}

	@JSON
	@Override
	public boolean getActive() {
		return _active;
	}

	@JSON
	@Override
	public boolean isActive() {
		return _active;
	}

	@Override
	public void setActive(boolean active) {
		_columnBitmask |= ACTIVE_COLUMN_BITMASK;

		if (!_setOriginalActive) {
			_setOriginalActive = true;

			_originalActive = _active;
		}

		_active = active;
	}

	public boolean getOriginalActive() {
		return _originalActive;
	}

	@JSON
	@Override
	public Date getLastPublishDate() {
		return _lastPublishDate;
	}

	@Override
	public void setLastPublishDate(Date lastPublishDate) {
		_lastPublishDate = lastPublishDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				CommerceCurrency.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			CommerceCurrency.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> nameMap = getNameMap();

		for (Map.Entry<Locale, String> entry : nameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> formatPatternMap = getFormatPatternMap();

		for (Map.Entry<Locale, String> entry : formatPatternMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getName();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(CommerceCurrency.class.getName(),
				getPrimaryKey(), defaultLocale, availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String name = getName(defaultLocale);

		if (Validator.isNull(name)) {
			setName(getName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setName(getName(defaultLocale), defaultLocale, defaultLocale);
		}

		String formatPattern = getFormatPattern(defaultLocale);

		if (Validator.isNull(formatPattern)) {
			setFormatPattern(getFormatPattern(modelDefaultLanguageId),
				defaultLocale);
		}
		else {
			setFormatPattern(getFormatPattern(defaultLocale), defaultLocale,
				defaultLocale);
		}
	}

	@Override
	public CommerceCurrency toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CommerceCurrency)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CommerceCurrencyImpl commerceCurrencyImpl = new CommerceCurrencyImpl();

		commerceCurrencyImpl.setUuid(getUuid());
		commerceCurrencyImpl.setCommerceCurrencyId(getCommerceCurrencyId());
		commerceCurrencyImpl.setGroupId(getGroupId());
		commerceCurrencyImpl.setCompanyId(getCompanyId());
		commerceCurrencyImpl.setUserId(getUserId());
		commerceCurrencyImpl.setUserName(getUserName());
		commerceCurrencyImpl.setCreateDate(getCreateDate());
		commerceCurrencyImpl.setModifiedDate(getModifiedDate());
		commerceCurrencyImpl.setCode(getCode());
		commerceCurrencyImpl.setName(getName());
		commerceCurrencyImpl.setRate(getRate());
		commerceCurrencyImpl.setFormatPattern(getFormatPattern());
		commerceCurrencyImpl.setMaxFractionDigits(getMaxFractionDigits());
		commerceCurrencyImpl.setMinFractionDigits(getMinFractionDigits());
		commerceCurrencyImpl.setRoundingMode(getRoundingMode());
		commerceCurrencyImpl.setPrimary(isPrimary());
		commerceCurrencyImpl.setPriority(getPriority());
		commerceCurrencyImpl.setActive(isActive());
		commerceCurrencyImpl.setLastPublishDate(getLastPublishDate());

		commerceCurrencyImpl.resetOriginalValues();

		return commerceCurrencyImpl;
	}

	@Override
	public int compareTo(CommerceCurrency commerceCurrency) {
		int value = 0;

		if (getPriority() < commerceCurrency.getPriority()) {
			value = -1;
		}
		else if (getPriority() > commerceCurrency.getPriority()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CommerceCurrency)) {
			return false;
		}

		CommerceCurrency commerceCurrency = (CommerceCurrency)obj;

		long primaryKey = commerceCurrency.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CommerceCurrencyModelImpl commerceCurrencyModelImpl = this;

		commerceCurrencyModelImpl._originalUuid = commerceCurrencyModelImpl._uuid;

		commerceCurrencyModelImpl._originalGroupId = commerceCurrencyModelImpl._groupId;

		commerceCurrencyModelImpl._setOriginalGroupId = false;

		commerceCurrencyModelImpl._originalCompanyId = commerceCurrencyModelImpl._companyId;

		commerceCurrencyModelImpl._setOriginalCompanyId = false;

		commerceCurrencyModelImpl._setModifiedDate = false;

		commerceCurrencyModelImpl._originalCode = commerceCurrencyModelImpl._code;

		commerceCurrencyModelImpl._originalPrimary = commerceCurrencyModelImpl._primary;

		commerceCurrencyModelImpl._setOriginalPrimary = false;

		commerceCurrencyModelImpl._originalActive = commerceCurrencyModelImpl._active;

		commerceCurrencyModelImpl._setOriginalActive = false;

		commerceCurrencyModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CommerceCurrency> toCacheModel() {
		CommerceCurrencyCacheModel commerceCurrencyCacheModel = new CommerceCurrencyCacheModel();

		commerceCurrencyCacheModel.uuid = getUuid();

		String uuid = commerceCurrencyCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			commerceCurrencyCacheModel.uuid = null;
		}

		commerceCurrencyCacheModel.commerceCurrencyId = getCommerceCurrencyId();

		commerceCurrencyCacheModel.groupId = getGroupId();

		commerceCurrencyCacheModel.companyId = getCompanyId();

		commerceCurrencyCacheModel.userId = getUserId();

		commerceCurrencyCacheModel.userName = getUserName();

		String userName = commerceCurrencyCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			commerceCurrencyCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			commerceCurrencyCacheModel.createDate = createDate.getTime();
		}
		else {
			commerceCurrencyCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			commerceCurrencyCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			commerceCurrencyCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		commerceCurrencyCacheModel.code = getCode();

		String code = commerceCurrencyCacheModel.code;

		if ((code != null) && (code.length() == 0)) {
			commerceCurrencyCacheModel.code = null;
		}

		commerceCurrencyCacheModel.name = getName();

		String name = commerceCurrencyCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			commerceCurrencyCacheModel.name = null;
		}

		commerceCurrencyCacheModel.rate = getRate();

		commerceCurrencyCacheModel.formatPattern = getFormatPattern();

		String formatPattern = commerceCurrencyCacheModel.formatPattern;

		if ((formatPattern != null) && (formatPattern.length() == 0)) {
			commerceCurrencyCacheModel.formatPattern = null;
		}

		commerceCurrencyCacheModel.maxFractionDigits = getMaxFractionDigits();

		commerceCurrencyCacheModel.minFractionDigits = getMinFractionDigits();

		commerceCurrencyCacheModel.roundingMode = getRoundingMode();

		String roundingMode = commerceCurrencyCacheModel.roundingMode;

		if ((roundingMode != null) && (roundingMode.length() == 0)) {
			commerceCurrencyCacheModel.roundingMode = null;
		}

		commerceCurrencyCacheModel.primary = isPrimary();

		commerceCurrencyCacheModel.priority = getPriority();

		commerceCurrencyCacheModel.active = isActive();

		Date lastPublishDate = getLastPublishDate();

		if (lastPublishDate != null) {
			commerceCurrencyCacheModel.lastPublishDate = lastPublishDate.getTime();
		}
		else {
			commerceCurrencyCacheModel.lastPublishDate = Long.MIN_VALUE;
		}

		return commerceCurrencyCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(39);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", commerceCurrencyId=");
		sb.append(getCommerceCurrencyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", code=");
		sb.append(getCode());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", rate=");
		sb.append(getRate());
		sb.append(", formatPattern=");
		sb.append(getFormatPattern());
		sb.append(", maxFractionDigits=");
		sb.append(getMaxFractionDigits());
		sb.append(", minFractionDigits=");
		sb.append(getMinFractionDigits());
		sb.append(", roundingMode=");
		sb.append(getRoundingMode());
		sb.append(", primary=");
		sb.append(isPrimary());
		sb.append(", priority=");
		sb.append(getPriority());
		sb.append(", active=");
		sb.append(isActive());
		sb.append(", lastPublishDate=");
		sb.append(getLastPublishDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(61);

		sb.append("<model><model-name>");
		sb.append("com.liferay.commerce.currency.model.CommerceCurrency");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commerceCurrencyId</column-name><column-value><![CDATA[");
		sb.append(getCommerceCurrencyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>code</column-name><column-value><![CDATA[");
		sb.append(getCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rate</column-name><column-value><![CDATA[");
		sb.append(getRate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>formatPattern</column-name><column-value><![CDATA[");
		sb.append(getFormatPattern());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maxFractionDigits</column-name><column-value><![CDATA[");
		sb.append(getMaxFractionDigits());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>minFractionDigits</column-name><column-value><![CDATA[");
		sb.append(getMinFractionDigits());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>roundingMode</column-name><column-value><![CDATA[");
		sb.append(getRoundingMode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>primary</column-name><column-value><![CDATA[");
		sb.append(isPrimary());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priority</column-name><column-value><![CDATA[");
		sb.append(getPriority());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>active</column-name><column-value><![CDATA[");
		sb.append(isActive());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastPublishDate</column-name><column-value><![CDATA[");
		sb.append(getLastPublishDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = CommerceCurrency.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			CommerceCurrency.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _commerceCurrencyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _code;
	private String _originalCode;
	private String _name;
	private String _nameCurrentLanguageId;
	private BigDecimal _rate;
	private String _formatPattern;
	private String _formatPatternCurrentLanguageId;
	private int _maxFractionDigits;
	private int _minFractionDigits;
	private String _roundingMode;
	private boolean _primary;
	private boolean _originalPrimary;
	private boolean _setOriginalPrimary;
	private double _priority;
	private boolean _active;
	private boolean _originalActive;
	private boolean _setOriginalActive;
	private Date _lastPublishDate;
	private long _columnBitmask;
	private CommerceCurrency _escapedModel;
}