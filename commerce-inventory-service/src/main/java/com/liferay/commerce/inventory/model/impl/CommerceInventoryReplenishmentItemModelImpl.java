/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.commerce.inventory.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.commerce.inventory.model.CommerceInventoryReplenishmentItem;
import com.liferay.commerce.inventory.model.CommerceInventoryReplenishmentItemModel;
import com.liferay.commerce.inventory.model.CommerceInventoryReplenishmentItemSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the CommerceInventoryReplenishmentItem service. Represents a row in the &quot;CIReplenishmentItem&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CommerceInventoryReplenishmentItemModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CommerceInventoryReplenishmentItemImpl}.
 * </p>
 *
 * @author Luca Pellizzon
 * @see CommerceInventoryReplenishmentItemImpl
 * @see CommerceInventoryReplenishmentItem
 * @see CommerceInventoryReplenishmentItemModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class CommerceInventoryReplenishmentItemModelImpl extends BaseModelImpl<CommerceInventoryReplenishmentItem>
	implements CommerceInventoryReplenishmentItemModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a commerce inventory replenishment item model instance should use the {@link CommerceInventoryReplenishmentItem} interface instead.
	 */
	public static final String TABLE_NAME = "CIReplenishmentItem";
	public static final Object[][] TABLE_COLUMNS = {
			{ "CIReplenishmentItemId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "commerceWarehouseId", Types.BIGINT },
			{ "sku", Types.VARCHAR },
			{ "availabilityDate", Types.TIMESTAMP },
			{ "quantity", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("CIReplenishmentItemId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("commerceWarehouseId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("sku", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("availabilityDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("quantity", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table CIReplenishmentItem (CIReplenishmentItemId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,commerceWarehouseId LONG,sku VARCHAR(75) null,availabilityDate DATE null,quantity INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table CIReplenishmentItem";
	public static final String ORDER_BY_JPQL = " ORDER BY commerceInventoryReplenishmentItem.commerceInventoryReplenishmentItemId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CIReplenishmentItem.CIReplenishmentItemId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.commerce.inventory.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.commerce.inventory.model.CommerceInventoryReplenishmentItem"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.commerce.inventory.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.commerce.inventory.model.CommerceInventoryReplenishmentItem"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.commerce.inventory.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.commerce.inventory.model.CommerceInventoryReplenishmentItem"),
			true);
	public static final long AVAILABILITYDATE_COLUMN_BITMASK = 1L;
	public static final long COMMERCEWAREHOUSEID_COLUMN_BITMASK = 2L;
	public static final long SKU_COLUMN_BITMASK = 4L;
	public static final long COMMERCEINVENTORYREPLENISHMENTITEMID_COLUMN_BITMASK =
		8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CommerceInventoryReplenishmentItem toModel(
		CommerceInventoryReplenishmentItemSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CommerceInventoryReplenishmentItem model = new CommerceInventoryReplenishmentItemImpl();

		model.setCommerceInventoryReplenishmentItemId(soapModel.getCommerceInventoryReplenishmentItemId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCommerceWarehouseId(soapModel.getCommerceWarehouseId());
		model.setSku(soapModel.getSku());
		model.setAvailabilityDate(soapModel.getAvailabilityDate());
		model.setQuantity(soapModel.getQuantity());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CommerceInventoryReplenishmentItem> toModels(
		CommerceInventoryReplenishmentItemSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CommerceInventoryReplenishmentItem> models = new ArrayList<CommerceInventoryReplenishmentItem>(soapModels.length);

		for (CommerceInventoryReplenishmentItemSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.commerce.inventory.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.commerce.inventory.model.CommerceInventoryReplenishmentItem"));

	public CommerceInventoryReplenishmentItemModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _commerceInventoryReplenishmentItemId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCommerceInventoryReplenishmentItemId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _commerceInventoryReplenishmentItemId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CommerceInventoryReplenishmentItem.class;
	}

	@Override
	public String getModelClassName() {
		return CommerceInventoryReplenishmentItem.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("commerceInventoryReplenishmentItemId",
			getCommerceInventoryReplenishmentItemId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("commerceWarehouseId", getCommerceWarehouseId());
		attributes.put("sku", getSku());
		attributes.put("availabilityDate", getAvailabilityDate());
		attributes.put("quantity", getQuantity());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long commerceInventoryReplenishmentItemId = (Long)attributes.get(
				"commerceInventoryReplenishmentItemId");

		if (commerceInventoryReplenishmentItemId != null) {
			setCommerceInventoryReplenishmentItemId(commerceInventoryReplenishmentItemId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long commerceWarehouseId = (Long)attributes.get("commerceWarehouseId");

		if (commerceWarehouseId != null) {
			setCommerceWarehouseId(commerceWarehouseId);
		}

		String sku = (String)attributes.get("sku");

		if (sku != null) {
			setSku(sku);
		}

		Date availabilityDate = (Date)attributes.get("availabilityDate");

		if (availabilityDate != null) {
			setAvailabilityDate(availabilityDate);
		}

		Integer quantity = (Integer)attributes.get("quantity");

		if (quantity != null) {
			setQuantity(quantity);
		}
	}

	@JSON
	@Override
	public long getCommerceInventoryReplenishmentItemId() {
		return _commerceInventoryReplenishmentItemId;
	}

	@Override
	public void setCommerceInventoryReplenishmentItemId(
		long commerceInventoryReplenishmentItemId) {
		_commerceInventoryReplenishmentItemId = commerceInventoryReplenishmentItemId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getCommerceWarehouseId() {
		return _commerceWarehouseId;
	}

	@Override
	public void setCommerceWarehouseId(long commerceWarehouseId) {
		_columnBitmask |= COMMERCEWAREHOUSEID_COLUMN_BITMASK;

		if (!_setOriginalCommerceWarehouseId) {
			_setOriginalCommerceWarehouseId = true;

			_originalCommerceWarehouseId = _commerceWarehouseId;
		}

		_commerceWarehouseId = commerceWarehouseId;
	}

	public long getOriginalCommerceWarehouseId() {
		return _originalCommerceWarehouseId;
	}

	@JSON
	@Override
	public String getSku() {
		if (_sku == null) {
			return "";
		}
		else {
			return _sku;
		}
	}

	@Override
	public void setSku(String sku) {
		_columnBitmask |= SKU_COLUMN_BITMASK;

		if (_originalSku == null) {
			_originalSku = _sku;
		}

		_sku = sku;
	}

	public String getOriginalSku() {
		return GetterUtil.getString(_originalSku);
	}

	@JSON
	@Override
	public Date getAvailabilityDate() {
		return _availabilityDate;
	}

	@Override
	public void setAvailabilityDate(Date availabilityDate) {
		_columnBitmask |= AVAILABILITYDATE_COLUMN_BITMASK;

		if (_originalAvailabilityDate == null) {
			_originalAvailabilityDate = _availabilityDate;
		}

		_availabilityDate = availabilityDate;
	}

	public Date getOriginalAvailabilityDate() {
		return _originalAvailabilityDate;
	}

	@JSON
	@Override
	public int getQuantity() {
		return _quantity;
	}

	@Override
	public void setQuantity(int quantity) {
		_quantity = quantity;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			CommerceInventoryReplenishmentItem.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CommerceInventoryReplenishmentItem toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CommerceInventoryReplenishmentItem)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CommerceInventoryReplenishmentItemImpl commerceInventoryReplenishmentItemImpl =
			new CommerceInventoryReplenishmentItemImpl();

		commerceInventoryReplenishmentItemImpl.setCommerceInventoryReplenishmentItemId(getCommerceInventoryReplenishmentItemId());
		commerceInventoryReplenishmentItemImpl.setCompanyId(getCompanyId());
		commerceInventoryReplenishmentItemImpl.setUserId(getUserId());
		commerceInventoryReplenishmentItemImpl.setUserName(getUserName());
		commerceInventoryReplenishmentItemImpl.setCreateDate(getCreateDate());
		commerceInventoryReplenishmentItemImpl.setModifiedDate(getModifiedDate());
		commerceInventoryReplenishmentItemImpl.setCommerceWarehouseId(getCommerceWarehouseId());
		commerceInventoryReplenishmentItemImpl.setSku(getSku());
		commerceInventoryReplenishmentItemImpl.setAvailabilityDate(getAvailabilityDate());
		commerceInventoryReplenishmentItemImpl.setQuantity(getQuantity());

		commerceInventoryReplenishmentItemImpl.resetOriginalValues();

		return commerceInventoryReplenishmentItemImpl;
	}

	@Override
	public int compareTo(
		CommerceInventoryReplenishmentItem commerceInventoryReplenishmentItem) {
		long primaryKey = commerceInventoryReplenishmentItem.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CommerceInventoryReplenishmentItem)) {
			return false;
		}

		CommerceInventoryReplenishmentItem commerceInventoryReplenishmentItem = (CommerceInventoryReplenishmentItem)obj;

		long primaryKey = commerceInventoryReplenishmentItem.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CommerceInventoryReplenishmentItemModelImpl commerceInventoryReplenishmentItemModelImpl =
			this;

		commerceInventoryReplenishmentItemModelImpl._setModifiedDate = false;

		commerceInventoryReplenishmentItemModelImpl._originalCommerceWarehouseId = commerceInventoryReplenishmentItemModelImpl._commerceWarehouseId;

		commerceInventoryReplenishmentItemModelImpl._setOriginalCommerceWarehouseId = false;

		commerceInventoryReplenishmentItemModelImpl._originalSku = commerceInventoryReplenishmentItemModelImpl._sku;

		commerceInventoryReplenishmentItemModelImpl._originalAvailabilityDate = commerceInventoryReplenishmentItemModelImpl._availabilityDate;

		commerceInventoryReplenishmentItemModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CommerceInventoryReplenishmentItem> toCacheModel() {
		CommerceInventoryReplenishmentItemCacheModel commerceInventoryReplenishmentItemCacheModel =
			new CommerceInventoryReplenishmentItemCacheModel();

		commerceInventoryReplenishmentItemCacheModel.commerceInventoryReplenishmentItemId = getCommerceInventoryReplenishmentItemId();

		commerceInventoryReplenishmentItemCacheModel.companyId = getCompanyId();

		commerceInventoryReplenishmentItemCacheModel.userId = getUserId();

		commerceInventoryReplenishmentItemCacheModel.userName = getUserName();

		String userName = commerceInventoryReplenishmentItemCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			commerceInventoryReplenishmentItemCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			commerceInventoryReplenishmentItemCacheModel.createDate = createDate.getTime();
		}
		else {
			commerceInventoryReplenishmentItemCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			commerceInventoryReplenishmentItemCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			commerceInventoryReplenishmentItemCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		commerceInventoryReplenishmentItemCacheModel.commerceWarehouseId = getCommerceWarehouseId();

		commerceInventoryReplenishmentItemCacheModel.sku = getSku();

		String sku = commerceInventoryReplenishmentItemCacheModel.sku;

		if ((sku != null) && (sku.length() == 0)) {
			commerceInventoryReplenishmentItemCacheModel.sku = null;
		}

		Date availabilityDate = getAvailabilityDate();

		if (availabilityDate != null) {
			commerceInventoryReplenishmentItemCacheModel.availabilityDate = availabilityDate.getTime();
		}
		else {
			commerceInventoryReplenishmentItemCacheModel.availabilityDate = Long.MIN_VALUE;
		}

		commerceInventoryReplenishmentItemCacheModel.quantity = getQuantity();

		return commerceInventoryReplenishmentItemCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{commerceInventoryReplenishmentItemId=");
		sb.append(getCommerceInventoryReplenishmentItemId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", commerceWarehouseId=");
		sb.append(getCommerceWarehouseId());
		sb.append(", sku=");
		sb.append(getSku());
		sb.append(", availabilityDate=");
		sb.append(getAvailabilityDate());
		sb.append(", quantity=");
		sb.append(getQuantity());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append(
			"com.liferay.commerce.inventory.model.CommerceInventoryReplenishmentItem");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>commerceInventoryReplenishmentItemId</column-name><column-value><![CDATA[");
		sb.append(getCommerceInventoryReplenishmentItemId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commerceWarehouseId</column-name><column-value><![CDATA[");
		sb.append(getCommerceWarehouseId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sku</column-name><column-value><![CDATA[");
		sb.append(getSku());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>availabilityDate</column-name><column-value><![CDATA[");
		sb.append(getAvailabilityDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>quantity</column-name><column-value><![CDATA[");
		sb.append(getQuantity());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = CommerceInventoryReplenishmentItem.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			CommerceInventoryReplenishmentItem.class, ModelWrapper.class
		};
	private long _commerceInventoryReplenishmentItemId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _commerceWarehouseId;
	private long _originalCommerceWarehouseId;
	private boolean _setOriginalCommerceWarehouseId;
	private String _sku;
	private String _originalSku;
	private Date _availabilityDate;
	private Date _originalAvailabilityDate;
	private int _quantity;
	private long _columnBitmask;
	private CommerceInventoryReplenishmentItem _escapedModel;
}