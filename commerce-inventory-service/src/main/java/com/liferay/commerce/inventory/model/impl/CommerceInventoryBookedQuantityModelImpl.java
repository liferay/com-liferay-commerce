/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.commerce.inventory.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.commerce.inventory.model.CommerceInventoryBookedQuantity;
import com.liferay.commerce.inventory.model.CommerceInventoryBookedQuantityModel;
import com.liferay.commerce.inventory.model.CommerceInventoryBookedQuantitySoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the CommerceInventoryBookedQuantity service. Represents a row in the &quot;CIBookedQuantity&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CommerceInventoryBookedQuantityModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CommerceInventoryBookedQuantityImpl}.
 * </p>
 *
 * @author Luca Pellizzon
 * @see CommerceInventoryBookedQuantityImpl
 * @see CommerceInventoryBookedQuantity
 * @see CommerceInventoryBookedQuantityModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class CommerceInventoryBookedQuantityModelImpl extends BaseModelImpl<CommerceInventoryBookedQuantity>
	implements CommerceInventoryBookedQuantityModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a commerce inventory booked quantity model instance should use the {@link CommerceInventoryBookedQuantity} interface instead.
	 */
	public static final String TABLE_NAME = "CIBookedQuantity";
	public static final Object[][] TABLE_COLUMNS = {
			{ "CIBookedQuantityId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "sku", Types.VARCHAR },
			{ "quantity", Types.INTEGER },
			{ "expireDate", Types.TIMESTAMP },
			{ "bookedNote", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("CIBookedQuantityId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("sku", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("quantity", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("expireDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("bookedNote", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table CIBookedQuantity (CIBookedQuantityId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,sku VARCHAR(75) null,quantity INTEGER,expireDate DATE null,bookedNote VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table CIBookedQuantity";
	public static final String ORDER_BY_JPQL = " ORDER BY commerceInventoryBookedQuantity.commerceInventoryBookedQuantityId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CIBookedQuantity.CIBookedQuantityId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.commerce.inventory.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.commerce.inventory.model.CommerceInventoryBookedQuantity"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.commerce.inventory.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.commerce.inventory.model.CommerceInventoryBookedQuantity"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.commerce.inventory.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.commerce.inventory.model.CommerceInventoryBookedQuantity"),
			true);
	public static final long EXPIREDATE_COLUMN_BITMASK = 1L;
	public static final long SKU_COLUMN_BITMASK = 2L;
	public static final long COMMERCEINVENTORYBOOKEDQUANTITYID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CommerceInventoryBookedQuantity toModel(
		CommerceInventoryBookedQuantitySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CommerceInventoryBookedQuantity model = new CommerceInventoryBookedQuantityImpl();

		model.setCommerceInventoryBookedQuantityId(soapModel.getCommerceInventoryBookedQuantityId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setSku(soapModel.getSku());
		model.setQuantity(soapModel.getQuantity());
		model.setExpireDate(soapModel.getExpireDate());
		model.setBookedNote(soapModel.getBookedNote());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CommerceInventoryBookedQuantity> toModels(
		CommerceInventoryBookedQuantitySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CommerceInventoryBookedQuantity> models = new ArrayList<CommerceInventoryBookedQuantity>(soapModels.length);

		for (CommerceInventoryBookedQuantitySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.commerce.inventory.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.commerce.inventory.model.CommerceInventoryBookedQuantity"));

	public CommerceInventoryBookedQuantityModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _commerceInventoryBookedQuantityId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCommerceInventoryBookedQuantityId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _commerceInventoryBookedQuantityId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CommerceInventoryBookedQuantity.class;
	}

	@Override
	public String getModelClassName() {
		return CommerceInventoryBookedQuantity.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("commerceInventoryBookedQuantityId",
			getCommerceInventoryBookedQuantityId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("sku", getSku());
		attributes.put("quantity", getQuantity());
		attributes.put("expireDate", getExpireDate());
		attributes.put("bookedNote", getBookedNote());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long commerceInventoryBookedQuantityId = (Long)attributes.get(
				"commerceInventoryBookedQuantityId");

		if (commerceInventoryBookedQuantityId != null) {
			setCommerceInventoryBookedQuantityId(commerceInventoryBookedQuantityId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String sku = (String)attributes.get("sku");

		if (sku != null) {
			setSku(sku);
		}

		Integer quantity = (Integer)attributes.get("quantity");

		if (quantity != null) {
			setQuantity(quantity);
		}

		Date expireDate = (Date)attributes.get("expireDate");

		if (expireDate != null) {
			setExpireDate(expireDate);
		}

		String bookedNote = (String)attributes.get("bookedNote");

		if (bookedNote != null) {
			setBookedNote(bookedNote);
		}
	}

	@JSON
	@Override
	public long getCommerceInventoryBookedQuantityId() {
		return _commerceInventoryBookedQuantityId;
	}

	@Override
	public void setCommerceInventoryBookedQuantityId(
		long commerceInventoryBookedQuantityId) {
		_commerceInventoryBookedQuantityId = commerceInventoryBookedQuantityId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getSku() {
		if (_sku == null) {
			return "";
		}
		else {
			return _sku;
		}
	}

	@Override
	public void setSku(String sku) {
		_columnBitmask |= SKU_COLUMN_BITMASK;

		if (_originalSku == null) {
			_originalSku = _sku;
		}

		_sku = sku;
	}

	public String getOriginalSku() {
		return GetterUtil.getString(_originalSku);
	}

	@JSON
	@Override
	public int getQuantity() {
		return _quantity;
	}

	@Override
	public void setQuantity(int quantity) {
		_quantity = quantity;
	}

	@JSON
	@Override
	public Date getExpireDate() {
		return _expireDate;
	}

	@Override
	public void setExpireDate(Date expireDate) {
		_columnBitmask |= EXPIREDATE_COLUMN_BITMASK;

		if (_originalExpireDate == null) {
			_originalExpireDate = _expireDate;
		}

		_expireDate = expireDate;
	}

	public Date getOriginalExpireDate() {
		return _originalExpireDate;
	}

	@JSON
	@Override
	public String getBookedNote() {
		if (_bookedNote == null) {
			return "";
		}
		else {
			return _bookedNote;
		}
	}

	@Override
	public void setBookedNote(String bookedNote) {
		_bookedNote = bookedNote;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			CommerceInventoryBookedQuantity.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CommerceInventoryBookedQuantity toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CommerceInventoryBookedQuantity)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CommerceInventoryBookedQuantityImpl commerceInventoryBookedQuantityImpl = new CommerceInventoryBookedQuantityImpl();

		commerceInventoryBookedQuantityImpl.setCommerceInventoryBookedQuantityId(getCommerceInventoryBookedQuantityId());
		commerceInventoryBookedQuantityImpl.setCompanyId(getCompanyId());
		commerceInventoryBookedQuantityImpl.setUserId(getUserId());
		commerceInventoryBookedQuantityImpl.setUserName(getUserName());
		commerceInventoryBookedQuantityImpl.setCreateDate(getCreateDate());
		commerceInventoryBookedQuantityImpl.setModifiedDate(getModifiedDate());
		commerceInventoryBookedQuantityImpl.setSku(getSku());
		commerceInventoryBookedQuantityImpl.setQuantity(getQuantity());
		commerceInventoryBookedQuantityImpl.setExpireDate(getExpireDate());
		commerceInventoryBookedQuantityImpl.setBookedNote(getBookedNote());

		commerceInventoryBookedQuantityImpl.resetOriginalValues();

		return commerceInventoryBookedQuantityImpl;
	}

	@Override
	public int compareTo(
		CommerceInventoryBookedQuantity commerceInventoryBookedQuantity) {
		long primaryKey = commerceInventoryBookedQuantity.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CommerceInventoryBookedQuantity)) {
			return false;
		}

		CommerceInventoryBookedQuantity commerceInventoryBookedQuantity = (CommerceInventoryBookedQuantity)obj;

		long primaryKey = commerceInventoryBookedQuantity.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CommerceInventoryBookedQuantityModelImpl commerceInventoryBookedQuantityModelImpl =
			this;

		commerceInventoryBookedQuantityModelImpl._setModifiedDate = false;

		commerceInventoryBookedQuantityModelImpl._originalSku = commerceInventoryBookedQuantityModelImpl._sku;

		commerceInventoryBookedQuantityModelImpl._originalExpireDate = commerceInventoryBookedQuantityModelImpl._expireDate;

		commerceInventoryBookedQuantityModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CommerceInventoryBookedQuantity> toCacheModel() {
		CommerceInventoryBookedQuantityCacheModel commerceInventoryBookedQuantityCacheModel =
			new CommerceInventoryBookedQuantityCacheModel();

		commerceInventoryBookedQuantityCacheModel.commerceInventoryBookedQuantityId = getCommerceInventoryBookedQuantityId();

		commerceInventoryBookedQuantityCacheModel.companyId = getCompanyId();

		commerceInventoryBookedQuantityCacheModel.userId = getUserId();

		commerceInventoryBookedQuantityCacheModel.userName = getUserName();

		String userName = commerceInventoryBookedQuantityCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			commerceInventoryBookedQuantityCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			commerceInventoryBookedQuantityCacheModel.createDate = createDate.getTime();
		}
		else {
			commerceInventoryBookedQuantityCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			commerceInventoryBookedQuantityCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			commerceInventoryBookedQuantityCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		commerceInventoryBookedQuantityCacheModel.sku = getSku();

		String sku = commerceInventoryBookedQuantityCacheModel.sku;

		if ((sku != null) && (sku.length() == 0)) {
			commerceInventoryBookedQuantityCacheModel.sku = null;
		}

		commerceInventoryBookedQuantityCacheModel.quantity = getQuantity();

		Date expireDate = getExpireDate();

		if (expireDate != null) {
			commerceInventoryBookedQuantityCacheModel.expireDate = expireDate.getTime();
		}
		else {
			commerceInventoryBookedQuantityCacheModel.expireDate = Long.MIN_VALUE;
		}

		commerceInventoryBookedQuantityCacheModel.bookedNote = getBookedNote();

		String bookedNote = commerceInventoryBookedQuantityCacheModel.bookedNote;

		if ((bookedNote != null) && (bookedNote.length() == 0)) {
			commerceInventoryBookedQuantityCacheModel.bookedNote = null;
		}

		return commerceInventoryBookedQuantityCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{commerceInventoryBookedQuantityId=");
		sb.append(getCommerceInventoryBookedQuantityId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", sku=");
		sb.append(getSku());
		sb.append(", quantity=");
		sb.append(getQuantity());
		sb.append(", expireDate=");
		sb.append(getExpireDate());
		sb.append(", bookedNote=");
		sb.append(getBookedNote());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append(
			"com.liferay.commerce.inventory.model.CommerceInventoryBookedQuantity");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>commerceInventoryBookedQuantityId</column-name><column-value><![CDATA[");
		sb.append(getCommerceInventoryBookedQuantityId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sku</column-name><column-value><![CDATA[");
		sb.append(getSku());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>quantity</column-name><column-value><![CDATA[");
		sb.append(getQuantity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expireDate</column-name><column-value><![CDATA[");
		sb.append(getExpireDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bookedNote</column-name><column-value><![CDATA[");
		sb.append(getBookedNote());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = CommerceInventoryBookedQuantity.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			CommerceInventoryBookedQuantity.class, ModelWrapper.class
		};
	private long _commerceInventoryBookedQuantityId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _sku;
	private String _originalSku;
	private int _quantity;
	private Date _expireDate;
	private Date _originalExpireDate;
	private String _bookedNote;
	private long _columnBitmask;
	private CommerceInventoryBookedQuantity _escapedModel;
}