/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.commerce.batch.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.commerce.batch.model.CommerceBatchJobInstance;
import com.liferay.commerce.batch.model.CommerceBatchJobInstanceModel;
import com.liferay.commerce.batch.model.CommerceBatchJobInstanceSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the CommerceBatchJobInstance service. Represents a row in the &quot;CommerceBatchJobInstance&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CommerceBatchJobInstanceModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CommerceBatchJobInstanceImpl}.
 * </p>
 *
 * @author Matija Petanjek
 * @see CommerceBatchJobInstanceImpl
 * @see CommerceBatchJobInstance
 * @see CommerceBatchJobInstanceModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class CommerceBatchJobInstanceModelImpl extends BaseModelImpl<CommerceBatchJobInstance>
	implements CommerceBatchJobInstanceModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a commerce batch job instance model instance should use the {@link CommerceBatchJobInstance} interface instead.
	 */
	public static final String TABLE_NAME = "CommerceBatchJobInstance";
	public static final Object[][] TABLE_COLUMNS = {
			{ "commerceBatchJobInstanceId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "batchJobName", Types.VARCHAR },
			{ "key_", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("commerceBatchJobInstanceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("batchJobName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("key_", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table CommerceBatchJobInstance (commerceBatchJobInstanceId LONG not null primary key,createDate DATE null,modifiedDate DATE null,batchJobName VARCHAR(75) null,key_ VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table CommerceBatchJobInstance";
	public static final String ORDER_BY_JPQL = " ORDER BY commerceBatchJobInstance.commerceBatchJobInstanceId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CommerceBatchJobInstance.commerceBatchJobInstanceId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.commerce.batch.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.commerce.batch.model.CommerceBatchJobInstance"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.commerce.batch.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.commerce.batch.model.CommerceBatchJobInstance"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CommerceBatchJobInstance toModel(
		CommerceBatchJobInstanceSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CommerceBatchJobInstance model = new CommerceBatchJobInstanceImpl();

		model.setCommerceBatchJobInstanceId(soapModel.getCommerceBatchJobInstanceId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setBatchJobName(soapModel.getBatchJobName());
		model.setKey(soapModel.getKey());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CommerceBatchJobInstance> toModels(
		CommerceBatchJobInstanceSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CommerceBatchJobInstance> models = new ArrayList<CommerceBatchJobInstance>(soapModels.length);

		for (CommerceBatchJobInstanceSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.commerce.batch.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.commerce.batch.model.CommerceBatchJobInstance"));

	public CommerceBatchJobInstanceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _commerceBatchJobInstanceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCommerceBatchJobInstanceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _commerceBatchJobInstanceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CommerceBatchJobInstance.class;
	}

	@Override
	public String getModelClassName() {
		return CommerceBatchJobInstance.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("commerceBatchJobInstanceId",
			getCommerceBatchJobInstanceId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("batchJobName", getBatchJobName());
		attributes.put("key", getKey());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long commerceBatchJobInstanceId = (Long)attributes.get(
				"commerceBatchJobInstanceId");

		if (commerceBatchJobInstanceId != null) {
			setCommerceBatchJobInstanceId(commerceBatchJobInstanceId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String batchJobName = (String)attributes.get("batchJobName");

		if (batchJobName != null) {
			setBatchJobName(batchJobName);
		}

		String key = (String)attributes.get("key");

		if (key != null) {
			setKey(key);
		}
	}

	@JSON
	@Override
	public long getCommerceBatchJobInstanceId() {
		return _commerceBatchJobInstanceId;
	}

	@Override
	public void setCommerceBatchJobInstanceId(long commerceBatchJobInstanceId) {
		_commerceBatchJobInstanceId = commerceBatchJobInstanceId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getBatchJobName() {
		if (_batchJobName == null) {
			return "";
		}
		else {
			return _batchJobName;
		}
	}

	@Override
	public void setBatchJobName(String batchJobName) {
		_batchJobName = batchJobName;
	}

	@JSON
	@Override
	public String getKey() {
		if (_key == null) {
			return "";
		}
		else {
			return _key;
		}
	}

	@Override
	public void setKey(String key) {
		_key = key;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			CommerceBatchJobInstance.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CommerceBatchJobInstance toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CommerceBatchJobInstance)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CommerceBatchJobInstanceImpl commerceBatchJobInstanceImpl = new CommerceBatchJobInstanceImpl();

		commerceBatchJobInstanceImpl.setCommerceBatchJobInstanceId(getCommerceBatchJobInstanceId());
		commerceBatchJobInstanceImpl.setCreateDate(getCreateDate());
		commerceBatchJobInstanceImpl.setModifiedDate(getModifiedDate());
		commerceBatchJobInstanceImpl.setBatchJobName(getBatchJobName());
		commerceBatchJobInstanceImpl.setKey(getKey());

		commerceBatchJobInstanceImpl.resetOriginalValues();

		return commerceBatchJobInstanceImpl;
	}

	@Override
	public int compareTo(CommerceBatchJobInstance commerceBatchJobInstance) {
		long primaryKey = commerceBatchJobInstance.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CommerceBatchJobInstance)) {
			return false;
		}

		CommerceBatchJobInstance commerceBatchJobInstance = (CommerceBatchJobInstance)obj;

		long primaryKey = commerceBatchJobInstance.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CommerceBatchJobInstanceModelImpl commerceBatchJobInstanceModelImpl = this;

		commerceBatchJobInstanceModelImpl._setModifiedDate = false;
	}

	@Override
	public CacheModel<CommerceBatchJobInstance> toCacheModel() {
		CommerceBatchJobInstanceCacheModel commerceBatchJobInstanceCacheModel = new CommerceBatchJobInstanceCacheModel();

		commerceBatchJobInstanceCacheModel.commerceBatchJobInstanceId = getCommerceBatchJobInstanceId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			commerceBatchJobInstanceCacheModel.createDate = createDate.getTime();
		}
		else {
			commerceBatchJobInstanceCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			commerceBatchJobInstanceCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			commerceBatchJobInstanceCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		commerceBatchJobInstanceCacheModel.batchJobName = getBatchJobName();

		String batchJobName = commerceBatchJobInstanceCacheModel.batchJobName;

		if ((batchJobName != null) && (batchJobName.length() == 0)) {
			commerceBatchJobInstanceCacheModel.batchJobName = null;
		}

		commerceBatchJobInstanceCacheModel.key = getKey();

		String key = commerceBatchJobInstanceCacheModel.key;

		if ((key != null) && (key.length() == 0)) {
			commerceBatchJobInstanceCacheModel.key = null;
		}

		return commerceBatchJobInstanceCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{commerceBatchJobInstanceId=");
		sb.append(getCommerceBatchJobInstanceId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", batchJobName=");
		sb.append(getBatchJobName());
		sb.append(", key=");
		sb.append(getKey());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.liferay.commerce.batch.model.CommerceBatchJobInstance");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>commerceBatchJobInstanceId</column-name><column-value><![CDATA[");
		sb.append(getCommerceBatchJobInstanceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>batchJobName</column-name><column-value><![CDATA[");
		sb.append(getBatchJobName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>key</column-name><column-value><![CDATA[");
		sb.append(getKey());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = CommerceBatchJobInstance.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			CommerceBatchJobInstance.class, ModelWrapper.class
		};
	private long _commerceBatchJobInstanceId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _batchJobName;
	private String _key;
	private CommerceBatchJobInstance _escapedModel;
}