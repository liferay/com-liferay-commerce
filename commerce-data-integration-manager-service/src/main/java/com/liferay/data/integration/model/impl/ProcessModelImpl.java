/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.data.integration.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.data.integration.model.Process;
import com.liferay.data.integration.model.ProcessModel;
import com.liferay.data.integration.model.ProcessSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Process service. Represents a row in the &quot;Process&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ProcessModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProcessImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ProcessImpl
 * @see Process
 * @see ProcessModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ProcessModelImpl extends BaseModelImpl<Process>
	implements ProcessModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a process model instance should use the {@link Process} interface instead.
	 */
	public static final String TABLE_NAME = "Process";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "processId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "name", Types.VARCHAR },
			{ "version", Types.VARCHAR },
			{ "className", Types.CLOB },
			{ "processType", Types.VARCHAR },
			{ "contextPropertiesFileEntryId", Types.BIGINT },
			{ "srcArchiveFileEntryId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("processId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("version", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("className", Types.CLOB);
		TABLE_COLUMNS_MAP.put("processType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contextPropertiesFileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("srcArchiveFileEntryId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table Process (uuid_ VARCHAR(75) null,processId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,name VARCHAR(75) null,version VARCHAR(75) null,className TEXT null,processType VARCHAR(75) null,contextPropertiesFileEntryId LONG,srcArchiveFileEntryId LONG)";
	public static final String TABLE_SQL_DROP = "drop table Process";
	public static final String ORDER_BY_JPQL = " ORDER BY process.modifiedDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY Process.modifiedDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.commerce.com.liferay.data.integration.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.data.integration.model.Process"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.commerce.com.liferay.data.integration.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.data.integration.model.Process"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.commerce.com.liferay.data.integration.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.data.integration.model.Process"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long GROUPID_COLUMN_BITMASK = 2L;
	public static final long NAME_COLUMN_BITMASK = 4L;
	public static final long PROCESSTYPE_COLUMN_BITMASK = 8L;
	public static final long UUID_COLUMN_BITMASK = 16L;
	public static final long MODIFIEDDATE_COLUMN_BITMASK = 32L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Process toModel(ProcessSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Process model = new ProcessImpl();

		model.setUuid(soapModel.getUuid());
		model.setProcessId(soapModel.getProcessId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setName(soapModel.getName());
		model.setVersion(soapModel.getVersion());
		model.setClassName(soapModel.getClassName());
		model.setProcessType(soapModel.getProcessType());
		model.setContextPropertiesFileEntryId(soapModel.getContextPropertiesFileEntryId());
		model.setSrcArchiveFileEntryId(soapModel.getSrcArchiveFileEntryId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Process> toModels(ProcessSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Process> models = new ArrayList<Process>(soapModels.length);

		for (ProcessSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.commerce.com.liferay.data.integration.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.data.integration.model.Process"));

	public ProcessModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _processId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProcessId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _processId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Process.class;
	}

	@Override
	public String getModelClassName() {
		return Process.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("processId", getProcessId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("name", getName());
		attributes.put("version", getVersion());
		attributes.put("className", getClassName());
		attributes.put("processType", getProcessType());
		attributes.put("contextPropertiesFileEntryId",
			getContextPropertiesFileEntryId());
		attributes.put("srcArchiveFileEntryId", getSrcArchiveFileEntryId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long processId = (Long)attributes.get("processId");

		if (processId != null) {
			setProcessId(processId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String version = (String)attributes.get("version");

		if (version != null) {
			setVersion(version);
		}

		String className = (String)attributes.get("className");

		if (className != null) {
			setClassName(className);
		}

		String processType = (String)attributes.get("processType");

		if (processType != null) {
			setProcessType(processType);
		}

		Long contextPropertiesFileEntryId = (Long)attributes.get(
				"contextPropertiesFileEntryId");

		if (contextPropertiesFileEntryId != null) {
			setContextPropertiesFileEntryId(contextPropertiesFileEntryId);
		}

		Long srcArchiveFileEntryId = (Long)attributes.get(
				"srcArchiveFileEntryId");

		if (srcArchiveFileEntryId != null) {
			setSrcArchiveFileEntryId(srcArchiveFileEntryId);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getProcessId() {
		return _processId;
	}

	@Override
	public void setProcessId(long processId) {
		_processId = processId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_columnBitmask = -1L;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask |= NAME_COLUMN_BITMASK;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@JSON
	@Override
	public String getVersion() {
		if (_version == null) {
			return "";
		}
		else {
			return _version;
		}
	}

	@Override
	public void setVersion(String version) {
		_version = version;
	}

	@JSON
	@Override
	public String getClassName() {
		if (_className == null) {
			return "";
		}
		else {
			return _className;
		}
	}

	@Override
	public void setClassName(String className) {
		_className = className;
	}

	@JSON
	@Override
	public String getProcessType() {
		if (_processType == null) {
			return "";
		}
		else {
			return _processType;
		}
	}

	@Override
	public void setProcessType(String processType) {
		_columnBitmask |= PROCESSTYPE_COLUMN_BITMASK;

		if (_originalProcessType == null) {
			_originalProcessType = _processType;
		}

		_processType = processType;
	}

	public String getOriginalProcessType() {
		return GetterUtil.getString(_originalProcessType);
	}

	@JSON
	@Override
	public long getContextPropertiesFileEntryId() {
		return _contextPropertiesFileEntryId;
	}

	@Override
	public void setContextPropertiesFileEntryId(
		long contextPropertiesFileEntryId) {
		_contextPropertiesFileEntryId = contextPropertiesFileEntryId;
	}

	@JSON
	@Override
	public long getSrcArchiveFileEntryId() {
		return _srcArchiveFileEntryId;
	}

	@Override
	public void setSrcArchiveFileEntryId(long srcArchiveFileEntryId) {
		_srcArchiveFileEntryId = srcArchiveFileEntryId;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				Process.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Process.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Process toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Process)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProcessImpl processImpl = new ProcessImpl();

		processImpl.setUuid(getUuid());
		processImpl.setProcessId(getProcessId());
		processImpl.setGroupId(getGroupId());
		processImpl.setCompanyId(getCompanyId());
		processImpl.setUserId(getUserId());
		processImpl.setUserName(getUserName());
		processImpl.setCreateDate(getCreateDate());
		processImpl.setModifiedDate(getModifiedDate());
		processImpl.setName(getName());
		processImpl.setVersion(getVersion());
		processImpl.setClassName(getClassName());
		processImpl.setProcessType(getProcessType());
		processImpl.setContextPropertiesFileEntryId(getContextPropertiesFileEntryId());
		processImpl.setSrcArchiveFileEntryId(getSrcArchiveFileEntryId());

		processImpl.resetOriginalValues();

		return processImpl;
	}

	@Override
	public int compareTo(Process process) {
		int value = 0;

		value = DateUtil.compareTo(getModifiedDate(), process.getModifiedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Process)) {
			return false;
		}

		Process process = (Process)obj;

		long primaryKey = process.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ProcessModelImpl processModelImpl = this;

		processModelImpl._originalUuid = processModelImpl._uuid;

		processModelImpl._originalGroupId = processModelImpl._groupId;

		processModelImpl._setOriginalGroupId = false;

		processModelImpl._originalCompanyId = processModelImpl._companyId;

		processModelImpl._setOriginalCompanyId = false;

		processModelImpl._setModifiedDate = false;

		processModelImpl._originalName = processModelImpl._name;

		processModelImpl._originalProcessType = processModelImpl._processType;

		processModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Process> toCacheModel() {
		ProcessCacheModel processCacheModel = new ProcessCacheModel();

		processCacheModel.uuid = getUuid();

		String uuid = processCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			processCacheModel.uuid = null;
		}

		processCacheModel.processId = getProcessId();

		processCacheModel.groupId = getGroupId();

		processCacheModel.companyId = getCompanyId();

		processCacheModel.userId = getUserId();

		processCacheModel.userName = getUserName();

		String userName = processCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			processCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			processCacheModel.createDate = createDate.getTime();
		}
		else {
			processCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			processCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			processCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		processCacheModel.name = getName();

		String name = processCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			processCacheModel.name = null;
		}

		processCacheModel.version = getVersion();

		String version = processCacheModel.version;

		if ((version != null) && (version.length() == 0)) {
			processCacheModel.version = null;
		}

		processCacheModel.className = getClassName();

		String className = processCacheModel.className;

		if ((className != null) && (className.length() == 0)) {
			processCacheModel.className = null;
		}

		processCacheModel.processType = getProcessType();

		String processType = processCacheModel.processType;

		if ((processType != null) && (processType.length() == 0)) {
			processCacheModel.processType = null;
		}

		processCacheModel.contextPropertiesFileEntryId = getContextPropertiesFileEntryId();

		processCacheModel.srcArchiveFileEntryId = getSrcArchiveFileEntryId();

		return processCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", processId=");
		sb.append(getProcessId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", version=");
		sb.append(getVersion());
		sb.append(", className=");
		sb.append(getClassName());
		sb.append(", processType=");
		sb.append(getProcessType());
		sb.append(", contextPropertiesFileEntryId=");
		sb.append(getContextPropertiesFileEntryId());
		sb.append(", srcArchiveFileEntryId=");
		sb.append(getSrcArchiveFileEntryId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("com.liferay.data.integration.model.Process");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>processId</column-name><column-value><![CDATA[");
		sb.append(getProcessId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>version</column-name><column-value><![CDATA[");
		sb.append(getVersion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>className</column-name><column-value><![CDATA[");
		sb.append(getClassName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>processType</column-name><column-value><![CDATA[");
		sb.append(getProcessType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contextPropertiesFileEntryId</column-name><column-value><![CDATA[");
		sb.append(getContextPropertiesFileEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>srcArchiveFileEntryId</column-name><column-value><![CDATA[");
		sb.append(getSrcArchiveFileEntryId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Process.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Process.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _processId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _name;
	private String _originalName;
	private String _version;
	private String _className;
	private String _processType;
	private String _originalProcessType;
	private long _contextPropertiesFileEntryId;
	private long _srcArchiveFileEntryId;
	private long _columnBitmask;
	private Process _escapedModel;
}