/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.data.integration.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.data.integration.model.ProcessType;
import com.liferay.data.integration.service.ProcessTypeLocalService;
import com.liferay.data.integration.service.persistence.HistoryPersistence;
import com.liferay.data.integration.service.persistence.ProcessPersistence;
import com.liferay.data.integration.service.persistence.ProcessTypePersistence;
import com.liferay.data.integration.service.persistence.ScheduledTaskPersistence;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the process type local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.data.integration.service.impl.ProcessTypeLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.liferay.data.integration.service.impl.ProcessTypeLocalServiceImpl
 * @see com.liferay.data.integration.service.ProcessTypeLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class ProcessTypeLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements ProcessTypeLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.data.integration.service.ProcessTypeLocalServiceUtil} to access the process type local service.
	 */

	/**
	 * Adds the process type to the database. Also notifies the appropriate model listeners.
	 *
	 * @param processType the process type
	 * @return the process type that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ProcessType addProcessType(ProcessType processType) {
		processType.setNew(true);

		return processTypePersistence.update(processType);
	}

	/**
	 * Creates a new process type with the primary key. Does not add the process type to the database.
	 *
	 * @param processTypeId the primary key for the new process type
	 * @return the new process type
	 */
	@Override
	@Transactional(enabled = false)
	public ProcessType createProcessType(long processTypeId) {
		return processTypePersistence.create(processTypeId);
	}

	/**
	 * Deletes the process type with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param processTypeId the primary key of the process type
	 * @return the process type that was removed
	 * @throws PortalException if a process type with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ProcessType deleteProcessType(long processTypeId)
		throws PortalException {
		return processTypePersistence.remove(processTypeId);
	}

	/**
	 * Deletes the process type from the database. Also notifies the appropriate model listeners.
	 *
	 * @param processType the process type
	 * @return the process type that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ProcessType deleteProcessType(ProcessType processType) {
		return processTypePersistence.remove(processType);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(ProcessType.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return processTypePersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.data.integration.model.impl.ProcessTypeModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return processTypePersistence.findWithDynamicQuery(dynamicQuery, start,
			end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.data.integration.model.impl.ProcessTypeModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return processTypePersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return processTypePersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return processTypePersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public ProcessType fetchProcessType(long processTypeId) {
		return processTypePersistence.fetchByPrimaryKey(processTypeId);
	}

	/**
	 * Returns the process type matching the UUID and group.
	 *
	 * @param uuid the process type's UUID
	 * @param groupId the primary key of the group
	 * @return the matching process type, or <code>null</code> if a matching process type could not be found
	 */
	@Override
	public ProcessType fetchProcessTypeByUuidAndGroupId(String uuid,
		long groupId) {
		return processTypePersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the process type with the primary key.
	 *
	 * @param processTypeId the primary key of the process type
	 * @return the process type
	 * @throws PortalException if a process type with the primary key could not be found
	 */
	@Override
	public ProcessType getProcessType(long processTypeId)
		throws PortalException {
		return processTypePersistence.findByPrimaryKey(processTypeId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(processTypeLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(ProcessType.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("processTypeId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(processTypeLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(ProcessType.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"processTypeId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(processTypeLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(ProcessType.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("processTypeId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {
		final ExportActionableDynamicQuery exportActionableDynamicQuery = new ExportActionableDynamicQuery() {
				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary = portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(stagedModelType,
						modelAdditionCount);

					long modelDeletionCount = ExportImportHelperUtil.getModelDeletionCount(portletDataContext,
							stagedModelType);

					manifestSummary.addModelDeletionCount(stagedModelType,
						modelDeletionCount);

					return modelAdditionCount;
				}
			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod() {
				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					portletDataContext.addDateRangeCriteria(dynamicQuery,
						"modifiedDate");
				}
			});

		exportActionableDynamicQuery.setCompanyId(portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<ProcessType>() {
				@Override
				public void performAction(ProcessType processType)
					throws PortalException {
					StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,
						processType);
				}
			});
		exportActionableDynamicQuery.setStagedModelType(new StagedModelType(
				PortalUtil.getClassNameId(ProcessType.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return processTypeLocalService.deleteProcessType((ProcessType)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return processTypePersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the process types matching the UUID and company.
	 *
	 * @param uuid the UUID of the process types
	 * @param companyId the primary key of the company
	 * @return the matching process types, or an empty list if no matches were found
	 */
	@Override
	public List<ProcessType> getProcessTypesByUuidAndCompanyId(String uuid,
		long companyId) {
		return processTypePersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of process types matching the UUID and company.
	 *
	 * @param uuid the UUID of the process types
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of process types
	 * @param end the upper bound of the range of process types (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching process types, or an empty list if no matches were found
	 */
	@Override
	public List<ProcessType> getProcessTypesByUuidAndCompanyId(String uuid,
		long companyId, int start, int end,
		OrderByComparator<ProcessType> orderByComparator) {
		return processTypePersistence.findByUuid_C(uuid, companyId, start, end,
			orderByComparator);
	}

	/**
	 * Returns the process type matching the UUID and group.
	 *
	 * @param uuid the process type's UUID
	 * @param groupId the primary key of the group
	 * @return the matching process type
	 * @throws PortalException if a matching process type could not be found
	 */
	@Override
	public ProcessType getProcessTypeByUuidAndGroupId(String uuid, long groupId)
		throws PortalException {
		return processTypePersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the process types.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.data.integration.model.impl.ProcessTypeModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of process types
	 * @param end the upper bound of the range of process types (not inclusive)
	 * @return the range of process types
	 */
	@Override
	public List<ProcessType> getProcessTypes(int start, int end) {
		return processTypePersistence.findAll(start, end);
	}

	/**
	 * Returns the number of process types.
	 *
	 * @return the number of process types
	 */
	@Override
	public int getProcessTypesCount() {
		return processTypePersistence.countAll();
	}

	/**
	 * Updates the process type in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param processType the process type
	 * @return the process type that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ProcessType updateProcessType(ProcessType processType) {
		return processTypePersistence.update(processType);
	}

	/**
	 * Returns the history local service.
	 *
	 * @return the history local service
	 */
	public com.liferay.data.integration.service.HistoryLocalService getHistoryLocalService() {
		return historyLocalService;
	}

	/**
	 * Sets the history local service.
	 *
	 * @param historyLocalService the history local service
	 */
	public void setHistoryLocalService(
		com.liferay.data.integration.service.HistoryLocalService historyLocalService) {
		this.historyLocalService = historyLocalService;
	}

	/**
	 * Returns the history persistence.
	 *
	 * @return the history persistence
	 */
	public HistoryPersistence getHistoryPersistence() {
		return historyPersistence;
	}

	/**
	 * Sets the history persistence.
	 *
	 * @param historyPersistence the history persistence
	 */
	public void setHistoryPersistence(HistoryPersistence historyPersistence) {
		this.historyPersistence = historyPersistence;
	}

	/**
	 * Returns the process local service.
	 *
	 * @return the process local service
	 */
	public com.liferay.data.integration.service.ProcessLocalService getProcessLocalService() {
		return processLocalService;
	}

	/**
	 * Sets the process local service.
	 *
	 * @param processLocalService the process local service
	 */
	public void setProcessLocalService(
		com.liferay.data.integration.service.ProcessLocalService processLocalService) {
		this.processLocalService = processLocalService;
	}

	/**
	 * Returns the process persistence.
	 *
	 * @return the process persistence
	 */
	public ProcessPersistence getProcessPersistence() {
		return processPersistence;
	}

	/**
	 * Sets the process persistence.
	 *
	 * @param processPersistence the process persistence
	 */
	public void setProcessPersistence(ProcessPersistence processPersistence) {
		this.processPersistence = processPersistence;
	}

	/**
	 * Returns the process type local service.
	 *
	 * @return the process type local service
	 */
	public ProcessTypeLocalService getProcessTypeLocalService() {
		return processTypeLocalService;
	}

	/**
	 * Sets the process type local service.
	 *
	 * @param processTypeLocalService the process type local service
	 */
	public void setProcessTypeLocalService(
		ProcessTypeLocalService processTypeLocalService) {
		this.processTypeLocalService = processTypeLocalService;
	}

	/**
	 * Returns the process type persistence.
	 *
	 * @return the process type persistence
	 */
	public ProcessTypePersistence getProcessTypePersistence() {
		return processTypePersistence;
	}

	/**
	 * Sets the process type persistence.
	 *
	 * @param processTypePersistence the process type persistence
	 */
	public void setProcessTypePersistence(
		ProcessTypePersistence processTypePersistence) {
		this.processTypePersistence = processTypePersistence;
	}

	/**
	 * Returns the scheduled task local service.
	 *
	 * @return the scheduled task local service
	 */
	public com.liferay.data.integration.service.ScheduledTaskLocalService getScheduledTaskLocalService() {
		return scheduledTaskLocalService;
	}

	/**
	 * Sets the scheduled task local service.
	 *
	 * @param scheduledTaskLocalService the scheduled task local service
	 */
	public void setScheduledTaskLocalService(
		com.liferay.data.integration.service.ScheduledTaskLocalService scheduledTaskLocalService) {
		this.scheduledTaskLocalService = scheduledTaskLocalService;
	}

	/**
	 * Returns the scheduled task persistence.
	 *
	 * @return the scheduled task persistence
	 */
	public ScheduledTaskPersistence getScheduledTaskPersistence() {
		return scheduledTaskPersistence;
	}

	/**
	 * Sets the scheduled task persistence.
	 *
	 * @param scheduledTaskPersistence the scheduled task persistence
	 */
	public void setScheduledTaskPersistence(
		ScheduledTaskPersistence scheduledTaskPersistence) {
		this.scheduledTaskPersistence = scheduledTaskPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.liferay.data.integration.model.ProcessType",
			processTypeLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.liferay.data.integration.model.ProcessType");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return ProcessTypeLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return ProcessType.class;
	}

	protected String getModelClassName() {
		return ProcessType.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = processTypePersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.liferay.data.integration.service.HistoryLocalService.class)
	protected com.liferay.data.integration.service.HistoryLocalService historyLocalService;
	@BeanReference(type = HistoryPersistence.class)
	protected HistoryPersistence historyPersistence;
	@BeanReference(type = com.liferay.data.integration.service.ProcessLocalService.class)
	protected com.liferay.data.integration.service.ProcessLocalService processLocalService;
	@BeanReference(type = ProcessPersistence.class)
	protected ProcessPersistence processPersistence;
	@BeanReference(type = ProcessTypeLocalService.class)
	protected ProcessTypeLocalService processTypeLocalService;
	@BeanReference(type = ProcessTypePersistence.class)
	protected ProcessTypePersistence processTypePersistence;
	@BeanReference(type = com.liferay.data.integration.service.ScheduledTaskLocalService.class)
	protected com.liferay.data.integration.service.ScheduledTaskLocalService scheduledTaskLocalService;
	@BeanReference(type = ScheduledTaskPersistence.class)
	protected ScheduledTaskPersistence scheduledTaskPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}