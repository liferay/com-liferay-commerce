/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.data.integration.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.data.integration.model.History;
import com.liferay.data.integration.model.HistoryModel;
import com.liferay.data.integration.model.HistorySoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the History service. Represents a row in the &quot;History&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link HistoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link HistoryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see HistoryImpl
 * @see History
 * @see HistoryModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class HistoryModelImpl extends BaseModelImpl<History>
	implements HistoryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a history model instance should use the {@link History} interface instead.
	 */
	public static final String TABLE_NAME = "History";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "historyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "launchType", Types.VARCHAR },
			{ "scheduledTaskId", Types.BIGINT },
			{ "status", Types.INTEGER },
			{ "startDate", Types.TIMESTAMP },
			{ "endDate", Types.TIMESTAMP },
			{ "executionType", Types.VARCHAR },
			{ "errorLogFileEntryId", Types.BIGINT },
			{ "runtimeLogFileEntryId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("historyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("launchType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("scheduledTaskId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("startDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("executionType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("errorLogFileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("runtimeLogFileEntryId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table History (uuid_ VARCHAR(75) null,historyId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,launchType VARCHAR(75) null,scheduledTaskId LONG,status INTEGER,startDate DATE null,endDate DATE null,executionType VARCHAR(75) null,errorLogFileEntryId LONG,runtimeLogFileEntryId LONG)";
	public static final String TABLE_SQL_DROP = "drop table History";
	public static final String ORDER_BY_JPQL = " ORDER BY history.modifiedDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY History.modifiedDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.commerce.com.liferay.data.integration.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.data.integration.model.History"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.commerce.com.liferay.data.integration.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.data.integration.model.History"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.commerce.com.liferay.data.integration.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.data.integration.model.History"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long GROUPID_COLUMN_BITMASK = 2L;
	public static final long SCHEDULEDTASKID_COLUMN_BITMASK = 4L;
	public static final long STATUS_COLUMN_BITMASK = 8L;
	public static final long UUID_COLUMN_BITMASK = 16L;
	public static final long MODIFIEDDATE_COLUMN_BITMASK = 32L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static History toModel(HistorySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		History model = new HistoryImpl();

		model.setUuid(soapModel.getUuid());
		model.setHistoryId(soapModel.getHistoryId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setLaunchType(soapModel.getLaunchType());
		model.setScheduledTaskId(soapModel.getScheduledTaskId());
		model.setStatus(soapModel.getStatus());
		model.setStartDate(soapModel.getStartDate());
		model.setEndDate(soapModel.getEndDate());
		model.setExecutionType(soapModel.getExecutionType());
		model.setErrorLogFileEntryId(soapModel.getErrorLogFileEntryId());
		model.setRuntimeLogFileEntryId(soapModel.getRuntimeLogFileEntryId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<History> toModels(HistorySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<History> models = new ArrayList<History>(soapModels.length);

		for (HistorySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.commerce.com.liferay.data.integration.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.data.integration.model.History"));

	public HistoryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _historyId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setHistoryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _historyId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return History.class;
	}

	@Override
	public String getModelClassName() {
		return History.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("historyId", getHistoryId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("launchType", getLaunchType());
		attributes.put("scheduledTaskId", getScheduledTaskId());
		attributes.put("status", getStatus());
		attributes.put("startDate", getStartDate());
		attributes.put("endDate", getEndDate());
		attributes.put("executionType", getExecutionType());
		attributes.put("errorLogFileEntryId", getErrorLogFileEntryId());
		attributes.put("runtimeLogFileEntryId", getRuntimeLogFileEntryId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long historyId = (Long)attributes.get("historyId");

		if (historyId != null) {
			setHistoryId(historyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String launchType = (String)attributes.get("launchType");

		if (launchType != null) {
			setLaunchType(launchType);
		}

		Long scheduledTaskId = (Long)attributes.get("scheduledTaskId");

		if (scheduledTaskId != null) {
			setScheduledTaskId(scheduledTaskId);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Date startDate = (Date)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		Date endDate = (Date)attributes.get("endDate");

		if (endDate != null) {
			setEndDate(endDate);
		}

		String executionType = (String)attributes.get("executionType");

		if (executionType != null) {
			setExecutionType(executionType);
		}

		Long errorLogFileEntryId = (Long)attributes.get("errorLogFileEntryId");

		if (errorLogFileEntryId != null) {
			setErrorLogFileEntryId(errorLogFileEntryId);
		}

		Long runtimeLogFileEntryId = (Long)attributes.get(
				"runtimeLogFileEntryId");

		if (runtimeLogFileEntryId != null) {
			setRuntimeLogFileEntryId(runtimeLogFileEntryId);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getHistoryId() {
		return _historyId;
	}

	@Override
	public void setHistoryId(long historyId) {
		_historyId = historyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_columnBitmask = -1L;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getLaunchType() {
		if (_launchType == null) {
			return "";
		}
		else {
			return _launchType;
		}
	}

	@Override
	public void setLaunchType(String launchType) {
		_launchType = launchType;
	}

	@JSON
	@Override
	public long getScheduledTaskId() {
		return _scheduledTaskId;
	}

	@Override
	public void setScheduledTaskId(long scheduledTaskId) {
		_columnBitmask |= SCHEDULEDTASKID_COLUMN_BITMASK;

		if (!_setOriginalScheduledTaskId) {
			_setOriginalScheduledTaskId = true;

			_originalScheduledTaskId = _scheduledTaskId;
		}

		_scheduledTaskId = scheduledTaskId;
	}

	public long getOriginalScheduledTaskId() {
		return _originalScheduledTaskId;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_startDate = startDate;
	}

	@JSON
	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		_endDate = endDate;
	}

	@JSON
	@Override
	public String getExecutionType() {
		if (_executionType == null) {
			return "";
		}
		else {
			return _executionType;
		}
	}

	@Override
	public void setExecutionType(String executionType) {
		_executionType = executionType;
	}

	@JSON
	@Override
	public long getErrorLogFileEntryId() {
		return _errorLogFileEntryId;
	}

	@Override
	public void setErrorLogFileEntryId(long errorLogFileEntryId) {
		_errorLogFileEntryId = errorLogFileEntryId;
	}

	@JSON
	@Override
	public long getRuntimeLogFileEntryId() {
		return _runtimeLogFileEntryId;
	}

	@Override
	public void setRuntimeLogFileEntryId(long runtimeLogFileEntryId) {
		_runtimeLogFileEntryId = runtimeLogFileEntryId;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				History.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			History.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public History toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (History)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		HistoryImpl historyImpl = new HistoryImpl();

		historyImpl.setUuid(getUuid());
		historyImpl.setHistoryId(getHistoryId());
		historyImpl.setGroupId(getGroupId());
		historyImpl.setCompanyId(getCompanyId());
		historyImpl.setUserId(getUserId());
		historyImpl.setUserName(getUserName());
		historyImpl.setCreateDate(getCreateDate());
		historyImpl.setModifiedDate(getModifiedDate());
		historyImpl.setLaunchType(getLaunchType());
		historyImpl.setScheduledTaskId(getScheduledTaskId());
		historyImpl.setStatus(getStatus());
		historyImpl.setStartDate(getStartDate());
		historyImpl.setEndDate(getEndDate());
		historyImpl.setExecutionType(getExecutionType());
		historyImpl.setErrorLogFileEntryId(getErrorLogFileEntryId());
		historyImpl.setRuntimeLogFileEntryId(getRuntimeLogFileEntryId());

		historyImpl.resetOriginalValues();

		return historyImpl;
	}

	@Override
	public int compareTo(History history) {
		int value = 0;

		value = DateUtil.compareTo(getModifiedDate(), history.getModifiedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof History)) {
			return false;
		}

		History history = (History)obj;

		long primaryKey = history.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		HistoryModelImpl historyModelImpl = this;

		historyModelImpl._originalUuid = historyModelImpl._uuid;

		historyModelImpl._originalGroupId = historyModelImpl._groupId;

		historyModelImpl._setOriginalGroupId = false;

		historyModelImpl._originalCompanyId = historyModelImpl._companyId;

		historyModelImpl._setOriginalCompanyId = false;

		historyModelImpl._setModifiedDate = false;

		historyModelImpl._originalScheduledTaskId = historyModelImpl._scheduledTaskId;

		historyModelImpl._setOriginalScheduledTaskId = false;

		historyModelImpl._originalStatus = historyModelImpl._status;

		historyModelImpl._setOriginalStatus = false;

		historyModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<History> toCacheModel() {
		HistoryCacheModel historyCacheModel = new HistoryCacheModel();

		historyCacheModel.uuid = getUuid();

		String uuid = historyCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			historyCacheModel.uuid = null;
		}

		historyCacheModel.historyId = getHistoryId();

		historyCacheModel.groupId = getGroupId();

		historyCacheModel.companyId = getCompanyId();

		historyCacheModel.userId = getUserId();

		historyCacheModel.userName = getUserName();

		String userName = historyCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			historyCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			historyCacheModel.createDate = createDate.getTime();
		}
		else {
			historyCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			historyCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			historyCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		historyCacheModel.launchType = getLaunchType();

		String launchType = historyCacheModel.launchType;

		if ((launchType != null) && (launchType.length() == 0)) {
			historyCacheModel.launchType = null;
		}

		historyCacheModel.scheduledTaskId = getScheduledTaskId();

		historyCacheModel.status = getStatus();

		Date startDate = getStartDate();

		if (startDate != null) {
			historyCacheModel.startDate = startDate.getTime();
		}
		else {
			historyCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			historyCacheModel.endDate = endDate.getTime();
		}
		else {
			historyCacheModel.endDate = Long.MIN_VALUE;
		}

		historyCacheModel.executionType = getExecutionType();

		String executionType = historyCacheModel.executionType;

		if ((executionType != null) && (executionType.length() == 0)) {
			historyCacheModel.executionType = null;
		}

		historyCacheModel.errorLogFileEntryId = getErrorLogFileEntryId();

		historyCacheModel.runtimeLogFileEntryId = getRuntimeLogFileEntryId();

		return historyCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(33);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", historyId=");
		sb.append(getHistoryId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", launchType=");
		sb.append(getLaunchType());
		sb.append(", scheduledTaskId=");
		sb.append(getScheduledTaskId());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", endDate=");
		sb.append(getEndDate());
		sb.append(", executionType=");
		sb.append(getExecutionType());
		sb.append(", errorLogFileEntryId=");
		sb.append(getErrorLogFileEntryId());
		sb.append(", runtimeLogFileEntryId=");
		sb.append(getRuntimeLogFileEntryId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(52);

		sb.append("<model><model-name>");
		sb.append("com.liferay.data.integration.model.History");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>historyId</column-name><column-value><![CDATA[");
		sb.append(getHistoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>launchType</column-name><column-value><![CDATA[");
		sb.append(getLaunchType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>scheduledTaskId</column-name><column-value><![CDATA[");
		sb.append(getScheduledTaskId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>executionType</column-name><column-value><![CDATA[");
		sb.append(getExecutionType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>errorLogFileEntryId</column-name><column-value><![CDATA[");
		sb.append(getErrorLogFileEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>runtimeLogFileEntryId</column-name><column-value><![CDATA[");
		sb.append(getRuntimeLogFileEntryId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = History.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			History.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _historyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _launchType;
	private long _scheduledTaskId;
	private long _originalScheduledTaskId;
	private boolean _setOriginalScheduledTaskId;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private Date _startDate;
	private Date _endDate;
	private String _executionType;
	private long _errorLogFileEntryId;
	private long _runtimeLogFileEntryId;
	private long _columnBitmask;
	private History _escapedModel;
}