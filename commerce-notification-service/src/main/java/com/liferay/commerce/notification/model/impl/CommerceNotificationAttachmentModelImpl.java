/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.commerce.notification.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.commerce.notification.model.CommerceNotificationAttachment;
import com.liferay.commerce.notification.model.CommerceNotificationAttachmentModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.petra.string.StringBundler;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the CommerceNotificationAttachment service. Represents a row in the &quot;CNotificationAttachment&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CommerceNotificationAttachmentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CommerceNotificationAttachmentImpl}.
 * </p>
 *
 * @author Alessio Antonio Rendina
 * @see CommerceNotificationAttachmentImpl
 * @see CommerceNotificationAttachment
 * @see CommerceNotificationAttachmentModel
 * @generated
 */
@ProviderType
public class CommerceNotificationAttachmentModelImpl extends BaseModelImpl<CommerceNotificationAttachment>
	implements CommerceNotificationAttachmentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a commerce notification attachment model instance should use the {@link CommerceNotificationAttachment} interface instead.
	 */
	public static final String TABLE_NAME = "CNotificationAttachment";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "CNotificationAttachmentId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "CNotificationQueueEntryId", Types.BIGINT },
			{ "fileEntryId", Types.BIGINT },
			{ "deleteOnSend", Types.BOOLEAN }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CNotificationAttachmentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("CNotificationQueueEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("deleteOnSend", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE = "create table CNotificationAttachment (uuid_ VARCHAR(75) null,CNotificationAttachmentId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,CNotificationQueueEntryId LONG,fileEntryId LONG,deleteOnSend BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table CNotificationAttachment";
	public static final String ORDER_BY_JPQL = " ORDER BY commerceNotificationAttachment.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY CNotificationAttachment.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.commerce.notification.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.commerce.notification.model.CommerceNotificationAttachment"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.commerce.notification.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.commerce.notification.model.CommerceNotificationAttachment"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.commerce.notification.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.commerce.notification.model.CommerceNotificationAttachment"),
			true);
	public static final long COMMERCENOTIFICATIONQUEUEENTRYID_COLUMN_BITMASK = 1L;
	public static final long COMPANYID_COLUMN_BITMASK = 2L;
	public static final long GROUPID_COLUMN_BITMASK = 4L;
	public static final long UUID_COLUMN_BITMASK = 8L;
	public static final long CREATEDATE_COLUMN_BITMASK = 16L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.commerce.notification.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.commerce.notification.model.CommerceNotificationAttachment"));

	public CommerceNotificationAttachmentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _commerceNotificationAttachmentId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCommerceNotificationAttachmentId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _commerceNotificationAttachmentId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CommerceNotificationAttachment.class;
	}

	@Override
	public String getModelClassName() {
		return CommerceNotificationAttachment.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("commerceNotificationAttachmentId",
			getCommerceNotificationAttachmentId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("commerceNotificationQueueEntryId",
			getCommerceNotificationQueueEntryId());
		attributes.put("fileEntryId", getFileEntryId());
		attributes.put("deleteOnSend", isDeleteOnSend());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long commerceNotificationAttachmentId = (Long)attributes.get(
				"commerceNotificationAttachmentId");

		if (commerceNotificationAttachmentId != null) {
			setCommerceNotificationAttachmentId(commerceNotificationAttachmentId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long commerceNotificationQueueEntryId = (Long)attributes.get(
				"commerceNotificationQueueEntryId");

		if (commerceNotificationQueueEntryId != null) {
			setCommerceNotificationQueueEntryId(commerceNotificationQueueEntryId);
		}

		Long fileEntryId = (Long)attributes.get("fileEntryId");

		if (fileEntryId != null) {
			setFileEntryId(fileEntryId);
		}

		Boolean deleteOnSend = (Boolean)attributes.get("deleteOnSend");

		if (deleteOnSend != null) {
			setDeleteOnSend(deleteOnSend);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getCommerceNotificationAttachmentId() {
		return _commerceNotificationAttachmentId;
	}

	@Override
	public void setCommerceNotificationAttachmentId(
		long commerceNotificationAttachmentId) {
		_commerceNotificationAttachmentId = commerceNotificationAttachmentId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getCommerceNotificationQueueEntryId() {
		return _commerceNotificationQueueEntryId;
	}

	@Override
	public void setCommerceNotificationQueueEntryId(
		long commerceNotificationQueueEntryId) {
		_columnBitmask |= COMMERCENOTIFICATIONQUEUEENTRYID_COLUMN_BITMASK;

		if (!_setOriginalCommerceNotificationQueueEntryId) {
			_setOriginalCommerceNotificationQueueEntryId = true;

			_originalCommerceNotificationQueueEntryId = _commerceNotificationQueueEntryId;
		}

		_commerceNotificationQueueEntryId = commerceNotificationQueueEntryId;
	}

	public long getOriginalCommerceNotificationQueueEntryId() {
		return _originalCommerceNotificationQueueEntryId;
	}

	@Override
	public long getFileEntryId() {
		return _fileEntryId;
	}

	@Override
	public void setFileEntryId(long fileEntryId) {
		_fileEntryId = fileEntryId;
	}

	@Override
	public boolean getDeleteOnSend() {
		return _deleteOnSend;
	}

	@Override
	public boolean isDeleteOnSend() {
		return _deleteOnSend;
	}

	@Override
	public void setDeleteOnSend(boolean deleteOnSend) {
		_deleteOnSend = deleteOnSend;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				CommerceNotificationAttachment.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			CommerceNotificationAttachment.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CommerceNotificationAttachment toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CommerceNotificationAttachment)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CommerceNotificationAttachmentImpl commerceNotificationAttachmentImpl = new CommerceNotificationAttachmentImpl();

		commerceNotificationAttachmentImpl.setUuid(getUuid());
		commerceNotificationAttachmentImpl.setCommerceNotificationAttachmentId(getCommerceNotificationAttachmentId());
		commerceNotificationAttachmentImpl.setGroupId(getGroupId());
		commerceNotificationAttachmentImpl.setCompanyId(getCompanyId());
		commerceNotificationAttachmentImpl.setUserId(getUserId());
		commerceNotificationAttachmentImpl.setUserName(getUserName());
		commerceNotificationAttachmentImpl.setCreateDate(getCreateDate());
		commerceNotificationAttachmentImpl.setModifiedDate(getModifiedDate());
		commerceNotificationAttachmentImpl.setCommerceNotificationQueueEntryId(getCommerceNotificationQueueEntryId());
		commerceNotificationAttachmentImpl.setFileEntryId(getFileEntryId());
		commerceNotificationAttachmentImpl.setDeleteOnSend(isDeleteOnSend());

		commerceNotificationAttachmentImpl.resetOriginalValues();

		return commerceNotificationAttachmentImpl;
	}

	@Override
	public int compareTo(
		CommerceNotificationAttachment commerceNotificationAttachment) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(),
				commerceNotificationAttachment.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CommerceNotificationAttachment)) {
			return false;
		}

		CommerceNotificationAttachment commerceNotificationAttachment = (CommerceNotificationAttachment)obj;

		long primaryKey = commerceNotificationAttachment.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CommerceNotificationAttachmentModelImpl commerceNotificationAttachmentModelImpl =
			this;

		commerceNotificationAttachmentModelImpl._originalUuid = commerceNotificationAttachmentModelImpl._uuid;

		commerceNotificationAttachmentModelImpl._originalGroupId = commerceNotificationAttachmentModelImpl._groupId;

		commerceNotificationAttachmentModelImpl._setOriginalGroupId = false;

		commerceNotificationAttachmentModelImpl._originalCompanyId = commerceNotificationAttachmentModelImpl._companyId;

		commerceNotificationAttachmentModelImpl._setOriginalCompanyId = false;

		commerceNotificationAttachmentModelImpl._setModifiedDate = false;

		commerceNotificationAttachmentModelImpl._originalCommerceNotificationQueueEntryId = commerceNotificationAttachmentModelImpl._commerceNotificationQueueEntryId;

		commerceNotificationAttachmentModelImpl._setOriginalCommerceNotificationQueueEntryId = false;

		commerceNotificationAttachmentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CommerceNotificationAttachment> toCacheModel() {
		CommerceNotificationAttachmentCacheModel commerceNotificationAttachmentCacheModel =
			new CommerceNotificationAttachmentCacheModel();

		commerceNotificationAttachmentCacheModel.uuid = getUuid();

		String uuid = commerceNotificationAttachmentCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			commerceNotificationAttachmentCacheModel.uuid = null;
		}

		commerceNotificationAttachmentCacheModel.commerceNotificationAttachmentId = getCommerceNotificationAttachmentId();

		commerceNotificationAttachmentCacheModel.groupId = getGroupId();

		commerceNotificationAttachmentCacheModel.companyId = getCompanyId();

		commerceNotificationAttachmentCacheModel.userId = getUserId();

		commerceNotificationAttachmentCacheModel.userName = getUserName();

		String userName = commerceNotificationAttachmentCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			commerceNotificationAttachmentCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			commerceNotificationAttachmentCacheModel.createDate = createDate.getTime();
		}
		else {
			commerceNotificationAttachmentCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			commerceNotificationAttachmentCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			commerceNotificationAttachmentCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		commerceNotificationAttachmentCacheModel.commerceNotificationQueueEntryId = getCommerceNotificationQueueEntryId();

		commerceNotificationAttachmentCacheModel.fileEntryId = getFileEntryId();

		commerceNotificationAttachmentCacheModel.deleteOnSend = isDeleteOnSend();

		return commerceNotificationAttachmentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", commerceNotificationAttachmentId=");
		sb.append(getCommerceNotificationAttachmentId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", commerceNotificationQueueEntryId=");
		sb.append(getCommerceNotificationQueueEntryId());
		sb.append(", fileEntryId=");
		sb.append(getFileEntryId());
		sb.append(", deleteOnSend=");
		sb.append(isDeleteOnSend());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append(
			"com.liferay.commerce.notification.model.CommerceNotificationAttachment");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commerceNotificationAttachmentId</column-name><column-value><![CDATA[");
		sb.append(getCommerceNotificationAttachmentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commerceNotificationQueueEntryId</column-name><column-value><![CDATA[");
		sb.append(getCommerceNotificationQueueEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileEntryId</column-name><column-value><![CDATA[");
		sb.append(getFileEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deleteOnSend</column-name><column-value><![CDATA[");
		sb.append(isDeleteOnSend());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = CommerceNotificationAttachment.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			CommerceNotificationAttachment.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _commerceNotificationAttachmentId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _commerceNotificationQueueEntryId;
	private long _originalCommerceNotificationQueueEntryId;
	private boolean _setOriginalCommerceNotificationQueueEntryId;
	private long _fileEntryId;
	private boolean _deleteOnSend;
	private long _columnBitmask;
	private CommerceNotificationAttachment _escapedModel;
}