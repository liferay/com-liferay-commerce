@component-name = "portal-commerce"
definition {
	property portal.upstream = "true";
	property testray.main.component.name = "Commerce";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		CommerceConfiguration.commerceAdminSetUp();

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.addCP(
			userEmailAddress = "commerceuser@liferay.com",
			userFirstName = "Commerce",
			userLastName = "User",
			userScreenName = "commerce"
		);
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			CommerceConfiguration.commerceSettingsTearDown();

			CommerceConfiguration.commerceAdminTearDown();
		}
	}

	test CreateNewAvailabilityEstimate {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "CommerceAdmin#CreateNewAvailabilityEstimate";

		ProductMenu.gotoPortlet(
			category = "Commerce",
			panel = "Site Administration",
			portlet = "Settings"
		);

		CommerceNavigator.gotoCommercePortletNavItem(navItem = "Availability Estimates");

		Click(locator1 = "Button#PLUS");

		CommerceEntry.addNewAvailabilityEstimatesEntry(
			entryName = "New Availability Estimate"
		);

		Button.clickSave();

		AssertElementPresent(locator1 = "Message#SUCCESS");
	}

	test CreateNewCatalogRule {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "CommerceAdmin#CreateNewCatalogRule";

		CommerceEntry.createNewUserSegment(
			criteriaType = "Users",
			criterionEntryName = "Commerce User",
			entryName = "User Segment"
		);

		ProductMenu.gotoPortlet(
			category = "Commerce",
			panel = "Site Administration",
			portlet = "Catalog Rules"
		);

		Click(locator1 = "Button#PLUS");

		CommerceEntry.addNewCatalogRule(
			catalogRuleType = "All products",
			entryName = "New Catalog Rule",
			userSegment = "User Segment"
		);
	}

	test CreateNewCountry {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "CommerceAdmin#CreateNewCountry";

		ProductMenu.gotoPortlet(
			category = "Commerce",
			panel = "Site Administration",
			portlet = "Settings"
		);

		CommerceNavigator.gotoCommercePortletNavItem(navItem = "Countries");

		Click(locator1 = "Button#PLUS");

		CommerceEntry.addNewCountriesEntry(entryName = "New Country");

		Button.clickSave();

		AssertElementPresent(locator1 = "Message#SUCCESS");

		CommerceEntry.gotoMenuTab(menuTab = "Regions");

		Click(locator1 = "Button#PLUS");

		CommerceEntry.addNewRegionsEntry(code = "NRE", entryName = "New Region");

		Button.clickSave();

		AssertElementPresent(locator1 = "Message#SUCCESS");
	}

	test CreateNewCurrency {
		CommerceEntry.createNewCurrenciesEntry(code = "NCU", entryName = "New Currency");
	}

	test CreateNewDiscount {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "CommerceAdmin#CreateNewDiscount";

		CommerceEntry.createNewUserSegment(
			criteriaType = "Users",
			criterionEntryName = "Commerce User",
			entryName = "User Segment"
		);

		ProductMenu.gotoPortlet(
			category = "Commerce",
			panel = "Site Administration",
			portlet = "Discounts"
		);

		Click(locator1 = "Button#PLUS");

		CommerceEntry.addNewDiscountsEntry(
			discountLevel = "15",
			discountTarget = "Apply to Product",
			entryTitle = "New Discount",
			maximumDiscountAmount = "10",
			userSegment = "User Segment"
		);

		Button.clickPublish();

		AssertElementPresent(locator1 = "Message#SUCCESS");
	}

	test CreateNewMeasurementUnits {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "CommerceAdmin#CreateNewMeasurementUnits";

		ProductMenu.gotoPortlet(
			category = "Commerce",
			panel = "Site Administration",
			portlet = "Settings"
		);

		CommerceNavigator.gotoCommercePortletNavItem(navItem = "Measurement Units");

		Click(locator1 = "Button#PLUS");

		CommerceEntry.addNewDimensionUnit(entryName = "New Dimension Unit");

		Button.clickSave();

		AssertElementPresent(locator1 = "Message#SUCCESS");

		CommerceNavigator.gotoCommercePortletNavItem(navItem = "Weight");

		Click(locator1 = "Button#PLUS");

		CommerceEntry.addNewWeightUnit(entryName = "New Weight Unit");

		Button.clickSave();

		AssertElementPresent(locator1 = "Message#SUCCESS");
	}

	@ignore = "true"
	test CreateNewNotificationTemplate {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "CommerceAdmin#CreateNewNotificationTemplate";

		CommerceEntry.createNewUserSegment(
			criteriaType = "Users",
			criterionEntryName = "Commerce User",
			entryName = "User Segment"
		);

		ProductMenu.gotoPortlet(
			category = "Commerce",
			panel = "Site Administration",
			portlet = "Settings"
		);

		CommerceNavigator.gotoCommercePortletNavItem(navItem = "Notificatios");

		CommerceEntry.gotoMenuTab(menuTab = "Notification Templates");

		Click(locator1 = "Button#PLUS");

		CommerceEntry.addNewNotificationTemplate(
			entryName = "New Notification Template",
			fromAddress = "test@liferay.com",
			fromName = "Test Test",
			notificationType = "Order Placed",
			userSegment = "User Segment"
		);

		Button.clickSave();

		AssertElementPresent(locator1 = "Message#SUCCESS");
	}

	test CreateNewPriceList {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "CommerceAdmin#CreateNewPriceList";

		CommerceEntry.createNewCurrenciesEntry(code = "NCU", entryName = "New Currency");

		CommerceEntry.createNewUserSegment(
			criteriaType = "Users",
			criterionEntryName = "Commerce User",
			entryName = "User Segment"
		);

		ProductMenu.gotoPortlet(
			category = "Commerce",
			panel = "Site Administration",
			portlet = "Price Lists"
		);

		Click(locator1 = "Button#PLUS");

		CommerceEntry.addNewPriceListsEntry(
			currencyCode = "NCU",
			entryName = "New Price List",
			userSegmentName = "User Segment"
		);

		Button.clickPublish();

		AssertElementPresent(locator1 = "Message#SUCCESS");
	}

	test CreateNewUserSegmentByOrganizations {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "CommerceAdmin#CreateNewUserSegmentByOrganizations";

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		Organization.addCP(orgName = "Commerce Organization", orgType = "Organization");

		CommerceEntry.createNewUserSegment(
			criteriaType = "Organizations",
			criterionEntryName = "Commerce Organization",
			entryName = "User Segment"
		);
	}

	test CreateNewUserSegmentByRegularRole {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "CommerceAdmin#CreateNewUserSegmentByRegularRole";

		CommerceEntry.createNewUserSegment(
			criteriaType = "Roles",
			criterionEntryName = "User",
			entryName = "User Segment",
			roleType = "Regular Role"
		);
	}

	test CreateNewUserSegmentByUserGroups {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "CommerceAdmin#CreateNewUserSegmentByUserGroups";

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "User Groups"
		);

		UserGroup.addCP(userGroupName = "Commerce UserGroup");

		CommerceEntry.createNewUserSegment(
			criteriaType = "User Groups",
			criterionEntryName = "Commerce UserGroup",
			entryName = "User Segment"
		);
	}

	test CreateNewUserSegmentByUsers {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "CommerceAdmin#CreateNewUserSegmentByUsers";

		CommerceEntry.createNewUserSegment(
			criteriaType = "Users",
			criterionEntryName = "Commerce User",
			entryName = "User Segment"
		);
	}
}
